[
  {
    "step_no": 1,
    "topic": "Introduction to DBMS",
    "data": [
      {
        "id": "Data-Database-and-File-System",
        "sl_no_in_step": 1,
        "title": "Data,Database and File System",
        "yt_link": "https://youtu.be/OdkJK6P4TCA?si=i0elakynUlhXLiAo",
        "article_link": "https://takeuforward.org/dbms/data-database-and-file-system",
        "content": "<p>Data is referred to as the collection of raw facts or figures that can be processed to derive meaning or knowledge. It is a collection of information gathered by observations, measurements, research, or analysis. In simpler terms, data is any fact that can be stored, e.g., \"EXY\", \"12\", etc.</p>\n\n<p><b>Data when processed becomes Information</b>. Information is the knowledge obtained from investigating, studying, or instructing data. For example, \"Raj\" is just data that can be written in a register, but when assigned to a person, it becomes information, i.e., the name of that man.</p>\n\n<p>Consider the string “orange”. Here, it could mean a color or a fruit. This term “orange” is data. However, if we say “color orange” or “fruit orange”, it becomes information.</p>\n\n<p>Similarly, “12” could mean age, pocket money, or roll number. Hence, this is data. When we say “Roll number 12,” it becomes information.</p>\n\n<h3>Database</h3>\n\n<p>A database is a structured collection of interrelated data organized in a way that enables efficient storage, retrieval, and manipulation of information. Key characteristics of databases include:</p>\n\n<ul>\n    <li>It is a collection of interrelated data.</li>\n    <li>It can be stored in the form of tables.</li>\n    <li>It can be of any size.</li>\n</ul>\n\n<p>Examples of databases:</p>\n\n<img src=\"https://static.takeuforward.org/content/data-db-file-1-8EmvW813\" alt=\"Database Example 1\">\n\n<p>For example, in a multimedia database, the image table would contain information about images like pixels, length, and width. Similarly, the video table would have features like pixels and video length. The image and video tables would be part of the multimedia database.</p>\n\n<p>Similarly, a college database would have tables like professor and student tables that are related to the timetable for class schedules.</p>\n\n<img src=\"https://static.takeuforward.org/content/data-db-file-2-8WLHQSvV\" alt=\"Database Example 2\">\n\n<p>Here, we can see that \"ID\" and \"Name\" are common columns in both A1 and A2 tables. Hence, it is a collection of related data. When merging A1 and A2, we get an A3 table with columns like ID, Name, Subject, and Place.</p>\n\n<h3>File System</h3>\n\n<p>A file system is a structure that an operating system uses to manage and organize files on a storage device, such as a hard drive or USB flash drive. It defines how data is organized, accessed, and stored on the storage device. The file system acts as an interface between the user and the data.</p>\n\n<h3>Disadvantages of the File System</h3>\n\n<ul>\n    <li><b>Data Redundancy</b>: Imagine a company using separate spreadsheets for sales, customer contacts, and inventory. If a customer buys a product, their information might be entered in all three spreadsheets, causing duplication.</li>\n    <li><b>Poor Memory Utilization</b>: Due to storing the same information like customer names and phone numbers in multiple spreadsheets, memory resources are poorly utilized.</li>\n    <li><b>Data Inconsistency</b>: If a customer's address is updated in the customer contacts spreadsheet but remains unchanged in the sales spreadsheet, it causes data inconsistency.</li>\n    <li><b>Data Security</b>: File systems do not ensure controlled access to sensitive data. In DBMS, it is possible to limit access to specific data, which protects against unauthorized access.</li>\n</ul>\n\n<h3>Database Management System (DBMS)</h3>\n\n<p>A Database Management System (DBMS) is software designed to manage, manipulate, and organize large volumes of data efficiently. It acts as an interface between the database and the users or applications, providing tools for storing, retrieving, updating, and managing data securely.</p>\n\n<h3>Real-life Applications of DBMS</h3>\n\n<ul>\n    <li><b>Banking Systems</b>: DBMS maintains a centralized and secure database of customer information like personal details and transaction history. For example, banks rely on DBMS to ensure data consistency when handling millions of transactions.</li>\n    <li><b>Airline Reservation Systems</b>: Airlines use DBMS to manage flight schedules, seat availability, and reservations. DBMS helps maintain data integrity across thousands of flights and millions of passengers.</li>\n    <li><b>Education Management Systems</b>: Schools and universities use DBMS to store and manage student information such as academic records and attendance. For example, when a new student is admitted, their record is added to the database seamlessly.</li>\n</ul>\n\n<blockquote class=\"wp-block-quote is-style-default\">\n    <p>Special thanks to <strong>Kuhuk Agarwal</strong> and <strong>Gauri Tomar</strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n</blockquote>"
      },
      {
        "id": "Types-of-Database",
        "sl_no_in_step": 2,
        "title": "Types of Database",
        "yt_link": "https://youtu.be/ln-JWRw_hFs?si=fYnMS_gJKsSkUP-n",
        "article_link": null
      },
      {
        "id": "What-is-DBMS-and-its-applications",
        "sl_no_in_step": 3,
        "title": "What is DBMS and its applications",
        "yt_link": "https://youtu.be/wulV-eIu9dM?si=0yd3a4bPdl3zN-A7",
        "article_link": "https://takeuforward.org/dbms/dbms-and-its-applications",
        "content": "<p>The acronym <b>DBMS</b> stands for “Database Management System”. A DBMS is a software application that acts as an interface between the data and the end user, allowing users to efficiently store, manage, retrieve, and manipulate large volumes of structured data. DBMS provides these functionalities by allowing database managers to implement certain rules and regulations in the system for different operations over the data.</p>\n\n<p>Imagine your college’s library. Your library has thousands of books, and each book contains valuable information. Now, think of your library as a database, and each book as a record in that database.</p>\n\n<ul>\n    <li><b>Organisation</b>: \n        <p>Just like in a library, a DBMS helps organise and store data efficiently. Books are arranged in the library according to genre, author, or subject. Similarly, data is arranged into tables in DBMSs, each having a unique collection of rows (like individual books) and columns (like book characteristics).</p>\n    </li>\n    <li><b>Search and Retrieval</b>: \n        <p>When someone comes to your library looking for a specific book, you use your cataloguing system to quickly locate it. Likewise, in a DBMS, users can perform queries to search for specific data using structured query language (SQL) or other interfaces.</p>\n    </li>\n    <li><b>Access Control</b>: \n        <p>In the library, not everyone can access every book. There are rules in place. Similarly, in a DBMS, access control mechanisms ensure that only authorized users can access certain data, protecting sensitive information.</p>\n    </li>\n    <li><b>Concurrency Control</b>: \n        <p>Imagine multiple people trying to borrow books simultaneously. To prevent chaos, the library has rules in place to manage this, ensuring that each person gets the book they need without conflicts. In a DBMS, concurrency control mechanisms manage multiple users accessing the database simultaneously, preventing data corruption or loss.</p>\n    </li>\n    <li><b>Data Integrity</b>: \n        <p>Just as you ensure that books are not damaged or lost in the library, a DBMS ensures data integrity by enforcing rules such as constraints and validations to maintain the accuracy and consistency of the data.</p>\n    </li>\n</ul>\n\n<img src=\"https://static.takeuforward.org/content/dbms-ex-T9H7ckYT\" alt=\"DBMS Example\">\n\n<h3>Applications of DBMS</h3>\n\n<ul>\n    <li><b>Banks</b>: \n        <p>DBMS allows banks and financial institutions to create a centralised and secure database of customer accounts, personal details, transaction history, and more. They maintain data integrity, security, and access control, which is crucial in financial applications.</p>\n    </li>\n    <li><b>Schools and Colleges</b>: \n        <p>Educational institutions use DBMS to manage student records like admissions, grades, enrolled courses, faculty directories, and administrative functions.</p>\n    </li>\n    <li><b>E-Commerce</b>: \n        <p>Online retail platforms rely on DBMS to store product catalogues, customer orders, payment information, and inventory data. A robust DBMS supports high transaction volumes and enables real-time inventory management and order processing.</p>\n    </li>\n    <li><b>Enterprise Resource Planning (ERP)</b>: \n        <p>For any large enterprise, DBMS offers a consolidated repository and interface to store, manage, and report over large volumes of data generated by multiple concurrent operations like supply chain management, customer relationship management, finance, and human resources.</p>\n    </li>\n</ul>\n\n<blockquote class=\"wp-block-quote is-style-default\">\n    <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/jhanvee-khola\">Jhanvee Khola</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n</blockquote>\n"
      },
      {
        "id": "Need-advantages-and-disadvantages-of-DBMS",
        "sl_no_in_step": 4,
        "title": "Need, advantages and disadvantages of DBMS",
        "yt_link": "https://youtu.be/T3at61GvUo0?si=JPqiG4V0IXryASOG",
        "article_link": "https://takeuforward.org/dbms/adv-disadv-dbms",
        "content": "<h3>Need of DBMS</h3>\n<p>DBMS plays a vital role for businesses, institutions, and organizations to effectively manage and utilize their data. It helps in the following ways:</p>\n<ul>\n    <li><b>Managing Data</b>: \n        <p>DBMS assists in managing operations like inserting, deleting, and manipulating data effectively.</p>\n    </li>\n    <li><b>Ensuring Data Accuracy and Security</b>: \n        <p>DBMS provides access control, ensuring that data is not accessible to unauthorized parties, which guarantees security and data accuracy.</p>\n    </li>\n    <li><b>Supporting Decision-Making</b>: \n        <p>DBMS provides control over how data is handled, which supports essential decision-making for businesses and organizations.</p>\n    </li>\n</ul>\n<p>DBMS serves as the core of contemporary information systems, facilitating efficient data management and serving as a foundation for a wide range of applications and services.</p>\n\n<img src=\"https://static.takeuforward.org/content/need-advantages-disadvantages-1-2I6OAeB9\" alt=\"Need of DBMS\">\n\n<h3>Advantages of DBMS</h3>\n<ul>\n    <li><b>Data Security</b>: \n        <p>DBMS implements security mechanisms that regulate access to sensitive information, safeguarding it from unauthorized access and potential data breaches.</p>\n    </li>\n    <li><b>Data Redundancy and Inconsistency</b>: \n        <p>DBMS eliminates data redundancy, minimizing storage needs and ensuring consistency by maintaining a unified version of the data. \n        <i>Example:</i> If multiple registers store the same information, they would unnecessarily consume memory and increase the time required for updates.</p>\n    </li>\n    <li><b>Data Integrity</b>: \n        <p>DBMS ensures data integrity by enforcing rules and constraints that prevent incorrect or inconsistent data from entering the database. \n        <i>Example:</i> If an age is to be entered in the database, the system can enforce that the input must be an integer.</p>\n    </li>\n    <li><b>Data Scalability</b>: \n        <p>DBMS can handle large datasets and scale to accommodate increasing amounts of data as an organization grows. \n        <i>Example:</i> Adding 1200 new employees' details to a database originally containing 40 employees can be done seamlessly using DBMS.</p>\n    </li>\n    <li><b>Data Abstraction</b>: \n        <p>DBMS offers data abstraction, allowing users and applications to interact with the database without needing to understand its underlying complexities.</p>\n    </li>\n</ul>\n\n<h3>Disadvantages of DBMS</h3>\n<ul>\n    <li><b>Cost</b>: \n        <p>Acquiring, deploying, and sustaining DBMS software can incur significant costs. Additionally, the hardware required for its operation may also be expensive.</p>\n    </li>\n    <li><b>Scale Projects</b>: \n        <p>For small-scale applications with minimal data storage needs, using a comprehensive DBMS may introduce unnecessary complexities and burdens. \n        <i>Example:</i> If an organization only wants to store data for 20 people and does not plan to add more, a DBMS may be overkill and more streamlined alternatives would be better suited.</p>\n    </li>\n    <li><b>Vendor Lock-In</b>: \n        <p>Switching to a different DBMS can be challenging due to differences in data formats and query languages, leading to vendor lock-in. \n        <i>Example:</i> A company using SQL to store data may find it difficult to switch to NoSQL due to their structural differences (SQL stores data in rows and columns, while NoSQL uses key-value pairs).</p>\n    </li>\n</ul>\n\n<img src=\"https://static.takeuforward.org/content/need-advantages-disadvantages-2-O2HmPKLP\" alt=\"Advantages and Disadvantages of DBMS\">\n\n<blockquote class=\"wp-block-quote is-style-default\">\n    <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-jaiswal-1b9509199/\">Kuhuk Jaiswal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward.</p>\n\n<p>If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n\n</blockquote>"
      },
      {
        "id": "Data-Abstraction",
        "sl_no_in_step": 5,
        "title": "Data Abstraction",
        "yt_link": "https://youtu.be/WYBdtOQwmSc?si=1dSLx2iFmQ2mL4TY",
        "article_link": "https://takeuforward.org/dbms/dbms-abstraction",
        "content": "<p>Database systems are built with complex ways of organizing data. To make it easier for people to use the database, the creators hide the complicated details that users don't need to worry about. This hiding of unnecessary complexities from users is called data abstraction.</p>\n\n<p><i>For example:</i> A user will not be concerned about indexing, memory storage locations, or what data structures are used behind the scenes. The user can directly interact with the database without needing to understand these underlying complexities.</p>\n\n<h3>Levels of Abstraction</h3>\n<p>There are three levels of data abstraction:</p>\n\n<img src=\"https://static.takeuforward.org/content/abstraction-1-azhv8IgU\" alt=\"Levels of Abstraction\">\n\n<ul>\n    <li><b>Physical Level</b>: \n        <p>This is the lowest level of data abstraction. It describes how data is stored in a database, providing details about complex data structures.</p>\n        <p><i>For example:</i> Think of a library storing books. The physical level involves how the books are physically stored on shelves, the materials used to make the shelves, and how the shelves are arranged within the library space.</p>\n    </li>\n    \n    <li><b>Logical Level</b>: \n        <p>This is the middle level of the 3-level data abstraction architecture. It describes what data is stored in the database and how it is structured.</p>\n        <p><i>For example:</i> Consider a library's catalogue system. At the logical level, it’s like looking at how books are categorised and indexed for easy retrieval. This includes details like the indexing methods used and how books are classified by subject, author, and title. It helps visitors search and find books based on their interests.</p>\n    </li>\n    \n    <li><b>View Level</b>: \n        <p>This is the highest level of data abstraction. It describes the interaction between users and the database system, focusing on what users can see and access.</p>\n        <p><i>For example:</i> In a library, different visitors may have different levels of access. At the view level, it's like determining who can borrow specific types of books or access restricted sections based on their role or membership level.</p>\n    </li>\n</ul>\n\n<blockquote class=\"wp-block-quote is-style-default\">\n    <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n</blockquote>"
      },
      {
        "id": "DBMS-Architecture",
        "sl_no_in_step": 6,
        "title": "DBMS Architecture",
        "yt_link": "https://www.youtube.com/playlist?list=PLrL_PSQ6q060ZVu6FEpjwNt1ab2J2S1dq",
        "article_link": "https://takeuforward.org/dbms/data-architecture",
        "content": "<p>A schema is a logical container or structure that organises and defines the structure of a database.</p>\n\n<p>It defines how data is organised, what data types are used, what constraints are applied, and the relationships between different pieces of data. A schema acts as a blueprint for the database, ensuring data integrity, consistency, and efficient data retrieval.</p>\n\n<img src=\"https://static.takeuforward.org/content/architecture-1-nOqhvuDu\" alt=\"Customer Database Schema Example\">\n\n<p>An illustration of the customer database schema is shown in the picture. In this case, we choose to have three rows and three columns. Every row item in the database will have a unique column ID, which can only contain integer values. Only char values are accepted as input for the customer's name and address. This contributes to maintaining data consistency, data integrity (as no other type of value can be kept in the database), and faster data retrieval through the use of unique keys.</p>\n\n<h3>Types of Schema</h3>\n\n<ul>\n    <li><b>Physical Schema</b>:\n        <p>A physical schema defines how data is stored on the underlying hardware, including details such as storage format, file organisation, indexing methods, and data placement.</p>\n        <ul>\n            <li><b>Characteristics of Physical Schema:</b>\n                <ul>\n                    <li>Its primary focus lies in enhancing the storage and retrieval of data to boost performance.</li>\n                    <li>Modifications made to the physical schema demand meticulous planning and can potentially affect the overall performance of the database.</li>\n                </ul>\n            </li>\n            <li><b>Example:</b> Deciding to use clustered indexes on specific columns for faster retrieval.</li>\n        </ul>\n    </li>\n    \n    <li><b>Logical Schema</b>:\n        <p>A logical schema defines the database’s structure from a logical or conceptual perspective, without considering how the data is physically stored.</p>\n    </li>\n</ul>\n\n<img src=\"https://static.takeuforward.org/content/architecture-2-0J67FpQm\" alt=\"Logical Schema Example\">\n\n<h3>Types of Logical Schema</h3>\n\n<ul>\n    <li><b>Conceptual Schema:</b> \n        <p>The conceptual schema represents the overall view of the entire database. It defines the high-level structure and relationships between all data elements.</p>\n        <p><i>For example:</i> Consider a university database with entities such as Student (StudentID, Name, Address, DateOfBirth), Course (CourseID, CourseName, Credits), and Department (DepartmentID, DepartmentName, OfficePhone). Relationships among them are:</p>\n        <ul>\n            <li>Students can enrol in multiple Courses.</li>\n            <li>Each Course can be taken by multiple students.</li>\n            <li>Each Course is offered by one Department, but a Department can offer multiple Courses.</li>\n        </ul>\n        <p>The focus is on what the data represents (students, courses, departments) and how these entities are interrelated through relationships like enrollment and offerings.</p>\n    </li>\n    \n    <li><b>External/View Schema:</b> \n        <p>An external schema defines the user-specific views of the database. It focuses on the portions of the database that are relevant to specific user roles or applications.</p>\n        <p><i>For example:</i> In a university database, for a Student's Portal, the view will have StudentProfile (StudentID, Name, Address, CoursesEnrolled). This view provides a student with access to their data and their course enrollments, but not to other students' information or course details like credits or department.</p>\n    </li>\n</ul>\n\n<h3>Characteristics of Logical Schema</h3>\n<ul>\n    <li>It delineates how data is structured into tables, the interconnections between these tables, and the restrictions placed on the data.</li>\n    <li>Logical schemas prioritise data modelling and database design over considerations related to hardware or storage specifics.</li>\n    <li><b>Example:</b> Defining tables, specifying primary and foreign keys, and creating views for data access.</li>\n</ul>\n\n<h3>Instance</h3>\n<p>The information residing within a database at a specific point in time is referred to as the database’s \"instance.\"</p>\n\n<p>Within a given database schema, the declarations of variables within its tables pertain to that specific database. The term \"instance\" in this context denotes the current values of these variables at a particular moment in time for that database.</p>\n\n<img src=\"https://static.takeuforward.org/content/architecture-2-ncGcYJop\" alt=\"Instance Example\">\n\n<p>The figure depicts the customer database in different instances. In instance 1, the customer with ID 1’s address is Delhi; however, it gets updated to Bangalore. Hence, in instance 2, we get a different value. Instances help in accommodating the updates taking place in the database.</p>\n\n<blockquote class=\"wp-block-quote is-style-default\">\n    <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n</blockquote>\n"
      },
      {
        "id": "3-tier-Architecture",
        "sl_no_in_step": 7,
        "title": "3-tier Architecture",
        "yt_link": "https://youtu.be/UOyA8TSE7l4?si=9PmAGslbpbcYXRg6",
        "article_link": "https://takeuforward.org/dbms/3-tier-architecture",
        "content": "<p>3-tier architecture is the most widely used architecture in real-world large and complex web applications like Facebook. This architecture separates the application into three logically distinct layers:</p>\n\n<ul>\n    <li><b>Presentation Layer</b> - Handles the user interface</li>\n    <li><b>Application Layer</b> - Manages business logic</li>\n    <li><b>Data Layer</b> - Manages data storage and processing</li>\n</ul>\n\n<p>In this architecture, the end user has no idea about the existence of the database beyond the application server. Similarly, the database has no knowledge about any other user beyond the application.</p>\n\n<p>Let us imagine an online shopping scenario. Whenever you go onto a platform like Amazon and perform an operation, such as searching for a product or adding an item to your cart, you interact with the frontend or User Interface (UI) of the application, which is represented by the <b>Presentation Layer</b>.</p>\n\n<p>Any operation performed at the presentation layer gets sent to the next layer, the <b>Application Layer</b>, as a request. Upon receiving the request, the application layer interprets the request, formulates a corresponding database query, and sends it to the <b>Data Layer</b>. The data layer, which stores all the data, receives the query and executes it against the database.</p>\n\n<p>Relevant information, such as product details and user account information, is retrieved, and the results are sent back to the application layer. The application layer processes the data further if necessary (e.g., formatting) and sends the response back to the presentation layer. The presentation layer then presents the results to the user, completing the process.</p>\n\n<img src=\"https://static.takeuforward.org/content/dbms-tier-3-arch-4H0AHQDr\" alt=\"3-Tier DBMS Architecture\">\n\n<h3>Advantages of 3-Tier Architecture</h3>\n\n<ul>\n    <li><b>Scalability:</b> Enhanced scalability due to the distributed deployment of application servers. Each layer can be adjusted without altering other layers.</li>\n    <li><b>Security:</b> The client does not directly interact with the server, providing an added layer of security.</li>\n    <li><b>Modularity and Maintainability:</b> Maintenance is simplified due to the separation of responsibilities.</li>\n    <li><b>Performance:</b> Individual optimisation of presentation or application tiers is possible, leading to better performance.</li>\n</ul>\n\n<h3>Disadvantages of 3-Tier Architecture</h3>\n\n<ul>\n    <li><b>Increased Complexity:</b> The introduction of an extra middle layer increases the complexity of the system. Communication points are also doubled.</li>\n    <li><b>Potential Latency Issues and Bottlenecks:</b> The added step of processing increases the possibility of latency and bottlenecks, as problems can arise in any layer at any time.</li>\n    <li><b>Longer Development Time:</b> Implementing three tiers with different logics and distributed responsibilities results in longer development time.</li>\n    <li><b>Resource Overhead:</b> Implementing an extra tier causes resource overhead for development, processing, and maintenance of the architecture.</li>\n</ul>\n\n<blockquote class=\"wp-block-quote is-style-default\">\n    <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/jhanvee-khola\">Jhanvee Khola</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n</blockquote>\n"
      }
    ]
  },
  {
    "step_no": 2,
    "topic": "Data Models",
    "data": [
      {
        "id": "Data-Models-and-its-Type",
        "sl_no_in_step": 1,
        "title": "Data Models and its Type",
        "yt_link": "https://youtu.be/RNl9ZIDzDG0?si=I__CvYLzoSonoXcR",
        "article_link": "https://takeuforward.org/dbms/data-models",
        "content": "    <p>A <b>data model</b> in a Database Management System (DBMS) is an abstract way to represent how data is structured and organized within a database. It shows the logical arrangement of data and the connections between different data components. Data models are crucial for understanding and designing databases, linking real-world entities to actual data storage.</p>\n    <p>For instance, before writing an algorithm for “Making Maggi,” having a flowchart makes it easier to implement the algorithm. Similarly, having a data model helps in understanding the relationships between different components in the database.</p>\n    \n    <h3>Types of Data Models</h3>\n    <ul>\n        <li>\n            <h3>Hierarchical Data Model</h3>\n            <p>This model displays data in a tree structure, where each record has a parent-child relationship. It is mainly used in older database systems.</p>\n            <p>For example, in the image below, \"School\" is the parent, and its children are \"Department\" and \"Infrastructure.\" The children of \"Department\" are \"Teacher,\" \"Staff,\" and \"Student.\"</p>\n            <img src=\"https://static.takeuforward.org/content/model-1-CMPs3DoV\" alt=\"Hierarchical Data Model\">\n        </li>\n        <li>\n            <h3>Network Data Model</h3>\n            <p>This model allows records to have multiple parent-child relationships, resembling a graph. It offers more flexibility than the hierarchical model.</p>\n            <p>For example, the image shows that \"Student\" has both \"Lab\" and \"School\" as parents.</p>\n            <img src=\"https://static.takeuforward.org/content/model-2-Ob-gCBrq\" alt=\"Network Data Model\">\n        </li>\n        <li>\n            <h3>Relational Data Model</h3>\n            <p>The relational model organizes data into tables (known as relations) with rows and columns. It is the most common data model and is based on set theory, using Structured Query Language (SQL) for data manipulation.</p>\n            <p>Example: A customer database where customers are stored in a table with attributes like name, address, and phone number.</p>\n            <img src=\"https://static.takeuforward.org/content/model-3-GV9W-xah\" alt=\"Relational Data Model\">\n        </li>\n        <li>\n            <h3>Entity-Relationship Model (ER Model)</h3>\n            <p>The ER model is used to design relational databases by representing data as entities (objects), attributes (properties of entities), and the relationships connecting these entities.</p>\n            <p>For example, the entity \"Student\" has an attribute \"S.Name\" and a relationship with the entity \"Courses.\"</p>\n            <img src=\"https://static.takeuforward.org/content/model-4-qxiaeRhz\" alt=\"ER Model\">\n        </li>\n        <li>\n            <h3>Object-Oriented Data Model</h3>\n            <p>This model applies the principles of object-oriented programming to databases. It represents data as objects with attributes and methods, supporting inheritance and encapsulation.</p>\n            <p>Example: A product in an e-commerce system can be represented as an object with properties like price, description, and methods to calculate discounts.</p>\n        </li>\n        <li>\n            <h3>NoSQL Data Models</h3>\n            <p>NoSQL databases offer various data models, including:</p>\n            <ul>\n                <li><b>Document-oriented</b> (e.g., MongoDB)</li>\n                <li><b>Key-value</b> (e.g., Redis)</li>\n                <li><b>Column-family</b> (e.g., Cassandra)</li>\n                <li><b>Graph</b> (e.g., Neo4j)</li>\n            </ul>\n            <p>These models are designed for scalability and flexibility, particularly when managing large amounts of unstructured or semi-structured data.</p>\n        </li>\n    </ul>\n\n<blockquote class=\"wp-block-quote is-style-default\"> <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p> </blockquote>"
      },
      {
        "id": "ER-Model-and-its-components-Entity,-Attributes-&-Relationship",
        "sl_no_in_step": 2,
        "title": "ER Model and its components Entity, Attributes & Relationship",
        "yt_link": "https://www.youtube.com/playlist?list=PLrL_PSQ6q060qiKUuOkYZnqg0uERbdPrA",
        "article_link": "https://takeuforward.org/dbms/entity-and-its-types",
        "content": "<h3>Entity and its types</h3>\n\n<p>An Entity is something from the real world, like a person, place, event, or idea. Each entity has specific features or traits that describe it.</p>\n\n<p>There are two types of entities:</p>\n\n<h3>Strong Entity</h3>\n\n<p>A strong entity is an entity that has its unique identifier (primary key) and is not dependent on any other entity for its existence within the database. Strong entities stand alone and have their own set of attributes. For Example- An entity “person” can exist independently.</p>\n\n<h3>Weak Entity</h3>\n\n<p>A weak entity is an entity that doesn't have a primary key of its own. It relies on a related strong entity (known as the \"owner\" entity) for its identity. The weak entity’s existence is defined by being related to the owner entity. For example- In a company, employees can file for dependents under their name. In this case, the entity, “Dependents” is weak.</p>\n\n<img src=\"https://static.takeuforward.org/content/entity-1-2svHQSO8\" alt=\"Strong Entity Example\">\n\n<p>From the figure, it can be seen that the “Student” table is a strong entity as it can exist independently. However, the “Course” table has a foreign key of S.ID (as explained here). This makes the “course” entity dependent on the “Student” entity. Hence, the “course” entity is a weak entity.</p>\n\n<img src=\"https://static.takeuforward.org/content/entity-2-BbrwBrju\" alt=\"Weak Entity Example\">\n\n<p>In the ER Model, the strong entity is represented in a rectangle, the weak entity in a double-edge rectangle and their relationship in a double-edged diamond shape, as shown in the figure.</p>\n\n<blockquote class=\"wp-block-quote is-style-default\">\n    <p>Special thanks to <strong>Kuhuk Agarwal</strong> and <strong>Gauri Tomar</strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n</blockquote>\n"
      },
      {
        "id": "Extended-ER-features",
        "sl_no_in_step": 3,
        "title": "Extended ER features",
        "yt_link": "https://www.youtube.com/playlist?list=PLrL_PSQ6q0620RsqRBswISZjUDSKZ9_NY",
        "article_link": "https://takeuforward.org/dbms/extended-ER-features",
        "content": "<p>The Extended Entity-Relationship (EER) model is an enhancement of the basic Entity-Relationship (ER) model used in database design. It includes additional features that provide more detail and allow for a more accurate representation of complex real-world scenarios.</p>\n\n<h3>Why do we need the EER model?</h3>\n<p>We design an ER model for relationships between entities. In the real world, the data may exhibit some hierarchical relationships, and the EER model provides mechanisms to represent these relationships accurately, which helps in code reusability, ensuring data integrity and consistency, and lowering the complexity.</p>\n\n<img src=\"https://static.takeuforward.org/content/extended-features-1-psMYO_kh\" alt=\"EER Model Example 1\">\n\n<p>For example, in the figure above, the “Person” entity is overburdened with all the attributes. However, most attributes are specific to a particular category, like “C.ID” to “Customer,” “S.ID” to “Student,” and “E.ID” and “Salary” to “Employee.” \n“Name” and “Age” are common attributes for the “Customer,” “Student,” and “Employee” entities.</p>\n\n<img src=\"https://static.takeuforward.org/content/extended-features-2-_Y6KbxxN\" alt=\"EER Model Example 2\">\n\n<p>Hence, using EER features, we can reduce the complexity of the ER Model by introducing subclasses. This will also help in reducing the overburdening of just one entity, i.e., “Parent.”</p>\n\n<h3>EER features</h3>\n\n<ul>\n    <li>\n        <strong>Specialisation:</strong> This is a top-down process where a general entity is divided into more specific entities based on certain attributes or relationships. For example, from a general \"Person\" entity, you might specialise in \"Employee\" and \"Student.\" \n        <p>Follows the property of inheritance, i.e., attributes of the parent class are inherited by the child class.</p>\n        <p>Example: From a general \"Person\" entity, we might specialise in \"Employee\" and \"Student.\"</p>\n    </li>\n    <li>\n        <strong>Generalisation:</strong> This is a bottom-up process where multiple specific entities are combined into a more general entity. For example, \"Car\" and \"Bike\" might be generalised into a single \"Vehicle\" entity. \n        <p>Follows the property of Abstraction, i.e., some attributes like “Model” and “Engine type” might be common in the child entities. They can be identified and given to the parent class to reduce redundancy.</p>\n        <p>Example: \"Car\" and \"Bike\" might be generalised into a single \"Vehicle\" entity.</p>\n    </li>\n    <li>\n        <strong>Aggregation:</strong> It can be thought of as stacking things on top of each other to create a structure. It is used to create a hierarchical structure in data modelling, showing how a higher-level entity is composed of lower-level entities. \n        <p>This follows the property of Abstraction, as multiple lower-level entities are combined into one to form a higher-level entity, thereby abstracting the complexity from the user.</p>\n        <p>Example: A \"Project\" entity might be composed of \"Tasks,\" where each task is an entity itself.</p>\n    </li>\n</ul>\n\n<h3>Benefits of Using the Enhanced Entity-Relationship (EER) Model</h3>\n\n<ul>\n    <li><strong>Enhanced Clarity and Structure:</strong> The EER model provides a more detailed and hierarchical structure compared to the basic ER model. This detailed nature helps in creating a clear and organised database design. By visually representing entities, relationships, and their specialisations, the EER model makes it easier for designers and users to understand the structure and flow of the database.</li>\n    <li><strong>Improved Maintainability:</strong> The EER model reduces redundancy and complexity in the database design. By organising entities and their relationships more efficiently, it becomes easier to maintain and update the database. Changes can be made at a higher level without affecting the entire structure, thus simplifying the process of updating the database as requirements evolve.</li>\n    <li><strong>Better Representation of Real-World Scenarios:</strong> The EER model includes advanced features such as specialisation, generalisation, and aggregation. These features allow for a more precise and accurate representation of real-world data relationships. For example, a \"Vehicle\" superclass can have \"Car\" and \"Truck\" subclasses, each with specific attributes. This capability helps in modelling complex real-world scenarios more effectively, making the database more relevant and useful.</li>\n</ul>\n\n<blockquote class=\"wp-block-quote is-style-default\">\n    <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n</blockquote>\n"
      },
      {
        "id": "Entity-Relationship-Diagrams",
        "sl_no_in_step": 4,
        "title": "Entity-Relationship Diagrams",
        "yt_link": "https://www.youtube.com/playlist?list=PLrL_PSQ6q061nXlCLggSBGPDd-oV-yytn",
        "article_link": "https://takeuforward.org/dbms/relationship-and-degree-in-er-model",
        "content": "<p>Relationship in the ER Model is the connection between entities (tables) based on related data. It is represented by the diamond in the ER model.</p>\n\n<img src=\"https://static.takeuforward.org/content/relationship-1-iN-fNYae\" alt=\"Relationship in ER Model\">\n\n<h4>Types of Relationship:</h4>\n\n<h4>Strong Relationship</h4>\n<p>A strong relationship exists when two entities are highly dependent on each other, and one entity cannot exist without the other.</p>\n\n<img src=\"https://static.takeuforward.org/content/relationship-2-qGSawVEo\" alt=\"Strong Relationship Example\">\n\n<p>From the figure, we can see that C.ID in the “Order” table is a foreign key referencing the “Customer” table. The “Order” entity holds no value in case the “Customer” table does not exist. It will not satisfy the Referential integrity rule in an ER Model. Therefore, the figure displays a strong relationship between the “Customer” and the “Order” entity.</p>\n\n<h4>Weak Relationship</h4>\n<p>A weak relationship, on the other hand, exists when two entities are related, but one entity can exist without the other. For example, in the “Order item” table we can see that “OI.ID” is a primary key. This table also has a foreign key “O.ID” referenced from the “Order” table. Even though there is a foreign key in the “Order item” table, this table can exist alone also as it has its own primary key.</p>\n\n<img src=\"https://static.takeuforward.org/content/relationship-4-3cs15PG5\" alt=\"Weak Relationship Example\">\n\n<h3>Degree in DBMS</h3>\n\n<p>A degree in DBMS refers to the number of attributes/columns that a relation/table has. For example, in the figure above, for the “Order” table we have attributes, “O.ID”, “Order name” and “Order details”, hence the degree is 3.</p>\n\n<h4>Degree Types:</h4>\n<table>\n  <tr>\n    <th>Degree</th>\n    <th>Name</th>\n    <th>Definition</th>\n  </tr>\n  <tr>\n    <td>1</td>\n    <td>Unary degree</td>\n    <td>A relation with a single attribute</td>\n  </tr>\n  <tr>\n    <td>2</td>\n    <td>Binary degree</td>\n    <td>A relation with two attributes</td>\n  </tr>\n  <tr>\n    <td>3</td>\n    <td>Ternary degree</td>\n    <td>A relation with three attributes</td>\n  </tr>\n  <tr>\n    <td>4</td>\n    <td>N-ary degree</td>\n    <td>A relation with more than three attributes n&gt;3</td>\n  </tr>\n</table>\n\n<h3>Null Value</h3>\n<p>In databases, a null value can occur for various reasons that are:</p>\n\n<h4>Not Needed Information</h4>\n<p>Sometimes, some details are asked, but they don't apply to everyone. For instance, asking for a \"Spouse Name\" from someone who isn't married.</p>\n\n<h4>Don't Know the Answer</h4>\n<p>Now and then, we’re asked a question, but we don't have an answer yet. For example, when you are filling out a quiz form in college, you might not know the answer to a question.</p>\n\n<h4>Forgot to Fill In</h4>\n<p>When you’re filling out a form, you accidentally miss putting in some important information.</p>\n\n<blockquote class=\"wp-block-quote is-style-default\">\n    <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n</blockquote>\n"
      },
      {
        "id": "Relational-model",
        "sl_no_in_step": 5,
        "title": "Relational model",
        "yt_link": "https://www.youtube.com/playlist?list=PLrL_PSQ6q062p4Esnjme-AitlVwjgSM6p",
        "article_link": "https://takeuforward.org/dbms/relationship-and-degree-in-er-model",
        "content": "<p>Relationship in the ER Model is the connection between entities (tables) based on related data. It is represented by the diamond in the ER model.</p>\n\n<img src=\"https://static.takeuforward.org/content/relationship-1-iN-fNYae\" alt=\"Relationship in ER Model\">\n\n<h4>Types of Relationship:</h4>\n\n<h4>Strong Relationship</h4>\n<p>A strong relationship exists when two entities are highly dependent on each other, and one entity cannot exist without the other.</p>\n\n<img src=\"https://static.takeuforward.org/content/relationship-2-qGSawVEo\" alt=\"Strong Relationship Example\">\n\n<p>From the figure, we can see that C.ID in the “Order” table is a foreign key referencing the “Customer” table. The “Order” entity holds no value in case the “Customer” table does not exist. It will not satisfy the Referential integrity rule in an ER Model. Therefore, the figure displays a strong relationship between the “Customer” and the “Order” entity.</p>\n\n<h4>Weak Relationship</h4>\n<p>A weak relationship, on the other hand, exists when two entities are related, but one entity can exist without the other. For example, in the “Order item” table we can see that “OI.ID” is a primary key. This table also has a foreign key “O.ID” referenced from the “Order” table. Even though there is a foreign key in the “Order item” table, this table can exist alone also as it has its own primary key.</p>\n\n<img src=\"https://static.takeuforward.org/content/relationship-4-3cs15PG5\" alt=\"Weak Relationship Example\">\n\n<h3>Degree in DBMS</h3>\n\n<p>A degree in DBMS refers to the number of attributes/columns that a relation/table has. For example, in the figure above, for the “Order” table we have attributes, “O.ID”, “Order name” and “Order details”, hence the degree is 3.</p>\n\n<h4>Degree Types:</h4>\n<table>\n  <tr>\n    <th>Degree</th>\n    <th>Name</th>\n    <th>Definition</th>\n  </tr>\n  <tr>\n    <td>1</td>\n    <td>Unary degree</td>\n    <td>A relation with a single attribute</td>\n  </tr>\n  <tr>\n    <td>2</td>\n    <td>Binary degree</td>\n    <td>A relation with two attributes</td>\n  </tr>\n  <tr>\n    <td>3</td>\n    <td>Ternary degree</td>\n    <td>A relation with three attributes</td>\n  </tr>\n  <tr>\n    <td>4</td>\n    <td>N-ary degree</td>\n    <td>A relation with more than three attributes n&gt;3</td>\n  </tr>\n</table>\n\n<h3>Null Value</h3>\n<p>In databases, a null value can occur for various reasons that are:</p>\n\n<h4>Not Needed Information</h4>\n<p>Sometimes, some details are asked, but they don't apply to everyone. For instance, asking for a \"Spouse Name\" from someone who isn't married.</p>\n\n<h4>Don't Know the Answer</h4>\n<p>Now and then, we’re asked a question, but we don't have an answer yet. For example, when you are filling out a quiz form in college, you might not know the answer to a question.</p>\n\n<h4>Forgot to Fill In</h4>\n<p>When you’re filling out a form, you accidentally miss putting in some important information.</p>\n\n<blockquote class=\"wp-block-quote is-style-default\">\n    <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n</blockquote>\n"
      }
    ]
  },
  {
    "step_no": 3,
    "topic": "RDBMS",
    "data": [
      {
        "id": "What-is-RDBMS",
        "sl_no_in_step": 1,
        "title": "What is RDBMS",
        "yt_link": "https://youtu.be/MFae6MaGetI?si=qA1M5Rx7QEalJ0J_",
        "article_link": "https://takeuforward.org/dbms/er-model-in-dbms",
        "content": "<h3>ER Model in DBMS</h3>\n\n<p>The Entity-Relationship (ER) model is a conceptual data model used in database design to represent the entities, attributes, and relationships within a database system. In the process of database design, the ER model holds significant importance, aiding in the development of an efficient and systematically structured database schema. Let's break down the components of an ER model with the example of your college.</p>\n\n<img src=\"https://static.takeuforward.org/content/er-model-components-tQ44Wy33\" alt=\"ER Model Components\">\n\n<h3>Entities:</h3>\n<p>Entities represent real-world objects or concepts about which data is stored in the database. They are typically nouns. For example: In a university database, the \"Student\" entity represents individual students enrolled in courses. The “Courses” offered are themselves entities of the ER Model for the university.</p>\n\n<h3>Attributes:</h3>\n<p>Attributes are the properties or characteristics of entities. They describe the entity. Attributes are typically adjectives or descriptors. For example: StudentID, Name, Age are attributes of the \"Student\" entity. Each student has a unique ID, a name, and an age.</p>\n\n<h3>Relationships:</h3>\n<p>Relationships describe how entities are related to each other. They are typically verbs or phrases that connect entities. For example: In the university database, there is a relationship between the \"Student\" and \"Course\" entities called \"Enrollment.\" A student can be enrolled in multiple courses, and a course can have multiple students enrolled in it.</p>\n\n<h3>Symbols used in ER Model:</h3>\n<p>ER Model is used to model the logical view of the system from a data perspective which consists of these symbols -</p>\n\n<h3>Figure:</h3>\n<table>\n  <tr>\n    <th>Symbol</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><img src=\"https://static.takeuforward.org/content/rectangle-EwzuBmAI\" alt=\"Rectangle\"></td>\n    <td>Represents an entity</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://static.takeuforward.org/content/diamond-VhFYghtZ\" alt=\"Diamond\"></td>\n    <td>Represents a relationship between entities</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://static.takeuforward.org/content/line-S83D_Uce\" alt=\"Line\"></td>\n    <td>Connects entities to relationships and relationships to attributes</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://static.takeuforward.org/content/ellipse-09Uk_rni\" alt=\"Ellipse\"></td>\n    <td>Represents an attribute</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://static.takeuforward.org/content/double-ellipse-nbzf2EfI\" alt=\"Double Ellipse\"></td>\n    <td>Represents a multivalued attribute</td>\n  </tr>\n  <tr>\n    <td><img src=\"https://static.takeuforward.org/content/double-rectangle-etEALwvD\" alt=\"Double Rectangle\"></td>\n    <td>Represents a weak entity</td>\n  </tr>\n</table>\n\n<h3>ER Diagram for College Example:</h3>\n<p>Now let’s create a simple ER diagram for your college with two basic entities of “Student” and “Course” using the above-listed symbols.</p>\n\n<img src=\"https://static.takeuforward.org/content/er-model-ex-oksM5Cqp\" alt=\"ER Diagram Example\">\n\n<p>In this diagram:</p>\n<ul>\n  <li>\"Student\" and \"Course\" are entities.</li>\n  <li>\"Enrollment\" is the relationship between them.</li>\n  <li>Attributes of each entity are connected to them.</li>\n</ul>\n\n<p>This ERD illustrates that students can enroll in several courses and a course can have many students enrolled in it.</p>\n\n<blockquote class=\"wp-block-quote is-style-default\">\n    <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n</blockquote>\n"
      },
      {
        "id": "Essential-Components-of-table",
        "sl_no_in_step": 2,
        "title": "Essential Components of table",
        "yt_link": "https://youtu.be/tzcK1wWQKlU?si=reZEDwChBugUhMe2",
        "article_link": "https://takeuforward.org/dbms/attributes-and-its-types",
        "content": "<h3>Attribute and its Types</h3>\n\n<p>We read about the ER model [give ref] and entity and its types [ref].</p>\n<p>Here is a quick revision, suppose we have a “Student” table which is a strong entity, i.e. it has a primary key and can exist independently. We have another table “Course”, which contains students' courses. It is a weak entity with a foreign key referencing from the primary key of the student table and establishing a relationship.</p>\n\n<p>From the figure, S.ID is the primary key in the “Student” table and S.ID in the “Course” table is a foreign key establishing a relationship with the primary key of the “Student” table.</p>\n\n<img src=\"https://static.takeuforward.org/content/attributes-1-EiUXxrf9\" alt=\"Attribute Example Figure\">\n\n<p>Attributes are the distinguishing characteristics that define an entity in a relational database. They provide information about the entities and relationships in the database. They are represented with an elliptic curve in the ER Model.</p>\n<p>From the figure, “Person” is the entity and “Name”, “Age” and “Address” are the characteristics of the “Person” and are called attributes.</p>\n\n<img src=\"https://static.takeuforward.org/content/attributes-2-pYB_FBrq\" alt=\"Attribute Example Figure\">\n\n<h3>Types of attributes:</h3>\n\n<h3>Simple attribute</h3>\n<p>A simple attribute is atomic and cannot be divided any further. For example, in the figure, the “Person” attribute can be further divided into “First name” “Middle name” and “Last name”, making the letter atomic and simple attributes.</p>\n\n<img src=\"https://static.takeuforward.org/content/attributes-3-aMnom0Ai\" alt=\"Simple Attribute Example Figure\">\n\n<h3>Composite attribute</h3>\n<p>A composite attribute is made up of several smaller parts, where each part represents a piece of the whole attribute. In simpler terms, it comprises attributes that can be divided further.</p>\n<p>For example, “Name” (First name, middle name, last name), “Address” (Street, Pincode, City) etc.</p>\n\n<img src=\"https://static.takeuforward.org/content/attributes-4-svy013YL\" alt=\"Composite Attribute Example Figure\">\n\n<h3>Single-valued attribute</h3>\n<p>A single-value attribute is an attribute that holds a single value for each entity. For example, Age, S.ID etc. They cannot have multiple values.</p>\n\n<h3>Multivalued attribute</h3>\n<p>A multi-valued attribute in a database is an attribute that can hold multiple values for a single entity. For example, Address (Permanent and residential address), Phone number (Father’s phone number, Mother’s phone number) etc.</p>\n\n<img src=\"https://static.takeuforward.org/content/attribute-4-GTL4Q9ni\" alt=\"Multivalued Attribute Example Figure\">\n\n<h3>Stored attribute</h3>\n<p>Attribute that is stored as a part of a database record. For example- Date of birth.</p>\n\n<h3>Derived attribute</h3>\n<p>A derived attribute is derived from other attributes within the database. For example- Age can be derived from Date of birth, and Salary can be derived from Base Salary, Stocks, Bonus etc.</p>\n\n<img src=\"https://static.takeuforward.org/content/attribute-5-bBZwqssu\" alt=\"Derived Attribute Example Figure\">\n\n<h3>Complex attribute</h3>\n<p>A complex attribute is an attribute that is made up of multiple smaller attributes. For example- “Name” and “Address” are complex attributes as they can be further divided into simple attributes.</p>\n\n<h3>Key attribute</h3>\n<p>The attribute which uniquely identifies each entity in the entity set is called the key attribute. For example, Roll_No will be unique for each student. In the ER diagram, the key attribute is represented by an oval with underlying lines.</p>\n\n<img src=\"https://static.takeuforward.org/content/attribute-6-kLvW3Syn\" alt=\"Key Attribute Example Figure\">\n<blockquote class=\"wp-block-quote is-style-default\">\n    <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n</blockquote>\n"
      },
      {
        "id": "Intension-and-Extension-in-a-DataBase",
        "sl_no_in_step": 3,
        "title": "Intension and Extension in a DataBase",
        "yt_link": "https://youtu.be/VFdvu6dkGVE?si=nhOukkpkaBBxDBoB",
        "article_link": "https://takeuforward.org/dbms/intension-extenstion",
        "content": "<p>In a database, the concepts of <b>intension</b> and <b>extension</b> refer to the structure and actual data stored, respectively. These two terms are important for understanding how databases work and how data is organized.</p>\n\n    <h3>Intension (Schema)</h3>\n    <p>The <b>intension</b> refers to the schema of the database, which is the blueprint or structure that defines the database. It includes the definitions of tables, fields (attributes), data types, relationships, constraints, indexes, and other elements that define how data is organized and accessed.</p>\n\n    <ul>\n        <li>Provides a framework for data storage and retrieval.</li>\n        <li>Ensures data integrity and consistency through constraints and relationships.</li>\n        <li>Facilitates understanding and managing the database structure.</li>\n    </ul>\n\n    <h3>Static Nature of Intension</h3>\n    <p>The intension, or schema, of a database is <b>relatively static</b>. Once defined, it does not change frequently. Modifications to the schema happen only in response to significant changes in business requirements or system upgrades. This stability ensures consistency in how data is organized and accessed.</p>\n\n    <h3>Extension (Instance)</h3>\n    <p>The <b>extension</b> refers to the actual data stored in the database at any given time. It consists of the rows (records) of data that populate the tables defined by the schema. Extensions are dynamic, changing frequently due to insertions, deletions, and updates to the data.</p>\n\n    <ul>\n        <li>Represents the real-time state of the database.</li>\n        <li>Reflects the actual data that users interact with.</li>\n        <li>Is critical for day-to-day operations and decision-making based on current data.</li>\n    </ul>\n\n    <h3>Dynamic Nature of Extensions</h3>\n    <p>The extension is <b>highly dynamic</b> because it changes as users interact with the database. This includes operations such as:</p>\n\n    <ul>\n        <li><b>Insertions</b>: Adding new records to tables.</li>\n        <li><b>Deletions</b>: Removing records from tables.</li>\n        <li><b>Updates</b>: Modifying existing records.</li>\n    </ul>\n\n    <p>The dynamic nature of extensions means the database state can change over time, reflecting real-world events and transactions.</p>\n\n    <h3>Difference between Intension and Extension in a Database</h3>\n\n    <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\n        <thead>\n            <tr>\n                <th>Property</th>\n                <th>Intension</th>\n                <th>Extension</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td><b>Definition</b></td>\n                <td>Refers to the schema or the structure of a database. It describes the blueprint of the database, including tables, columns, data types, constraints, and relationships.</td>\n                <td>Refers to the actual data stored in the database at a particular point in time, representing the current state of the database, including records in the tables.</td>\n            </tr>\n            <tr>\n                <td><b>Nature</b></td>\n                <td>Static and does not change frequently. It is predefined and stored in the schema.</td>\n                <td>Dynamic and changes over time as records are inserted, updated, or deleted.</td>\n            </tr>\n            <tr>\n                <td><b>Purpose</b></td>\n                <td>Provides a framework for how data is stored and managed. It defines the rules and constraints for data integrity and relationships among entities.</td>\n                <td>Represents the real-world information the database is meant to capture. It is the content users interact with.</td>\n            </tr>\n            <tr>\n                <td><b>Components</b></td>\n                <td>Includes table definitions, column names, data types, constraints (e.g., primary keys, foreign keys), indexes, views, and triggers.</td>\n                <td>Includes rows (records) in the tables, actual values stored in each field of those rows.</td>\n            </tr>\n            <tr>\n                <td><b>Visibility</b></td>\n                <td>Visible to database designers and developers who define the schema.</td>\n                <td>Visible to end-users who query and manipulate the data. Users interact with this data through queries and reports.</td>\n            </tr>\n        </tbody>\n    </table>\n\n    <h3>Example of Intension and Extension</h3>\n\n    <p>Consider the following example of creating an <b>Employees</b> table:</p>\n\n    <pre><code>CREATE TABLE Employees (\n    EmpID INT PRIMARY KEY,\n    FirstName VARCHAR(50),\n    LastName VARCHAR(50),\n    Department VARCHAR(50),\n    Salary DECIMAL(10, 2)\n);</code></pre>\n\n    <p>This is the schema definition (intension) for the <b>Employees</b> table.</p>\n\n    <h3>Extension Example at Time t1</h3>\n\n    <img src=\"https://static.takeuforward.org/content/extension1-m-KSQNbL\" alt=\"Employees Table at t1\">\n\n    <h3>Extension Example at Time t2</h3>\n\n    <img src=\"https://static.takeuforward.org/content/extension2-oHBH8yjW\" alt=\"Employees Table at t2\">\n\n    <p>At t1, two tuples (rows) are added to the table. At t2, two more tuples are added, and one tuple is altered. The extensions change as new employees are added, existing employees leave, or their details are updated.</p>\n\n    <h3>Schema Definition Language (SDL)</h3>\n\n    <p>The <b>Schema Definition Language</b> (SDL), also known as <b>Data Definition Language</b> (DDL), is a subset of SQL used to define and manage the structure of a database. It encompasses various commands to specify how data is stored and how the relationships among data elements are maintained.</p>\n\n    <h3>Key Components and Concepts of SDL</h3>\n\n    <ul>\n        <li><b>Data Types</b>: Defines the types of data that can be stored. Examples: INT, VARCHAR, DATE, BOOLEAN.</li>\n        <li><b>Tables</b>: Basic units of storage, consisting of rows and columns. Each column has a specific data type.</li>\n        <li><b>Constraints</b>: Rules to ensure data integrity. Examples: PRIMARY KEY, FOREIGN KEY, UNIQUE, NOT NULL, CHECK.</li>\n        <li><b>Indexes</b>: Improve data retrieval speed. Examples: CREATE INDEX, UNIQUE INDEX.</li>\n        <li><b>Views</b>: Virtual tables created from SQL query results.</li>\n        <li><b>Triggers</b>: Procedures that are automatically executed in response to certain events on a table or view.</li>\n    </ul>\n\n    <h3>Common SDL Commands</h3>\n\n    <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\">\n        <thead>\n            <tr>\n                <th>Command</th>\n                <th>Description</th>\n                <th>Syntax</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td><b>CREATE</b></td>\n                <td>Creates a new table with specified columns and constraints.</td>\n                <td><code>CREATE TABLE table_name (column1 datatype constraints, column2 datatype constraints, ...);</code></td>\n            </tr>\n            <tr>\n                <td><b>DROP</b></td>\n                <td>Deletes a table and all its data from the database.</td>\n                <td><code>DROP TABLE table_name;</code></td>\n            </tr>\n            <tr>\n                <td><b>ALTER</b></td>\n                <td>Modifies an existing table by adding, deleting, or modifying columns and constraints.</td>\n                <td><code>ALTER TABLE table_name ADD column_name datatype constraints;</code><br>\n                    <code>ALTER TABLE table_name DROP COLUMN column_name;</code><br>\n                    <code>ALTER TABLE table_name MODIFY column_name datatype constraints;</code></td>\n            </tr>\n            <tr>\n                <td><b>TRUNCATE</b></td>\n                <td>Removes all rows from a table without deleting the table itself.</td>\n                <td><code>TRUNCATE TABLE table_name;</code></td>\n            </tr>\n            <tr>\n                <td><b>COMMENT</b></td>\n                <td>Adds comments to the data dictionary.</td>\n                <td><code>COMMENT 'comment_text' ON TABLE table_name;</code></td>\n            </tr>\n            <tr>\n                <td><b>RENAME</b></td>\n                <td>Renames an existing object in the database.</td>\n                <td><code>RENAME TABLE old_table_name TO new_table_name;</code></td>\n            </tr>\n        </tbody>\n    </table>\n\n<blockquote class=\"wp-block-quote is-style-default\">\n    <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n</blockquote>"
      },
      {
        "id": "Keys",
        "sl_no_in_step": 4,
        "title": "Keys",
        "yt_link": "https://www.youtube.com/playlist?list=PLrL_PSQ6q0602Cra0ZN8RWgjjbXu5zjC2",
        "article_link": "https://takeuforward.org/dbms/keys",
        "content": "<p>\n        In a <b>Database Management System (DBMS)</b>, keys are essential for defining the structure of a database and maintaining data accuracy. Keys help in uniquely identifying records and retrieving data quickly. Below are the main types of keys used in DBMS:\n    </p>\n\n    <h3>Types of Keys</h3>\n    <ul>\n        <li><b>Candidate Key</b></li>\n        <li><b>Primary Key</b></li>\n        <li><b>Foreign Key</b></li>\n        <li><b>Super Key</b></li>\n    </ul>\n\n    <h3>Candidate Key</h3>\n    <p>\n        <b>Definition:</b> A candidate key is an attribute (or set of attributes) that can uniquely identify a record in a table.\n    </p>\n    <p>\n        <b>Characteristics:</b>\n    </p>\n    <ul>\n        <li>There can be multiple candidate keys in a table.</li>\n        <li>One of the candidate keys is selected as the primary key.</li>\n    </ul>\n    <p><b>Example:</b> In a table of students, possible candidate keys could be StudentID, Roll No, or Aadhar Card.</p>\n    <img src=\"https://static.takeuforward.org/content/keys-1-5YgU3aTN\" alt=\"Candidate Key Example\">\n\n    <h3>Primary Key</h3>\n    <p>\n        <b>Definition:</b> A primary key is a unique identifier for a record in a table. It ensures that no two records have the same value in this field or combination of fields.\n    </p>\n    <p>\n        <b>Characteristics:</b>\n    </p>\n    <ul>\n        <li>Primary keys must be unique across the table.</li>\n        <li>They cannot contain NULL values.</li>\n        <li>There can be only one primary key per table.</li>\n    </ul>\n    <p><b>Example:</b> ID and Registration numbers can be primary keys. However, PAN number cannot be a primary key because some students might not have a PAN card, and names cannot be unique.</p>\n    <img src=\"https://static.takeuforward.org/content/keys-2-OusqKlSC\" alt=\"Primary Key Example\">\n\n    <h3>Foreign Key</h3>\n    <p>\n        <b>Definition:</b> A foreign key is an attribute in one table that refers to the primary key in another table. It creates a link between two tables.\n    </p>\n    <p>\n        <b>Characteristics:</b>\n    </p>\n    <ul>\n        <li>Used to establish a link between data in two tables.</li>\n        <li>Ensures referential integrity between the tables.</li>\n    </ul>\n    <p><b>Example:</b> A StudentID in the \"Enrollments\" table can be a foreign key that references the StudentID in the \"Students\" table.</p>\n    <img src=\"https://static.takeuforward.org/content/keys-3-tQfAfe1O\" alt=\"Foreign Key Example\">\n\n    <h3>Super Key</h3>\n    <p>\n        <b>Definition:</b> A super key is a set of one or more attributes that can uniquely identify a record in a table.\n    </p>\n    <p>\n        <b>Characteristics:</b>\n    </p>\n    <ul>\n        <li>A super key may contain additional attributes that aren't necessary for unique identification.</li>\n        <li>Every primary key is a super key, but not all super keys are primary keys.</li>\n    </ul>\n    <p><b>Example:</b> ID and Name together can be a super key, but only the ID can be a primary key since the Name is not unique.</p>\n    <img src=\"https://static.takeuforward.org/content/keys-4-L3l0rEvT\" alt=\"Super Key Example\">\n\n    <h3>Advantages of Keys in DBMS</h3>\n    <ul>\n        <li><b>Uniquely Identifying Data:</b> Keys, especially primary keys, ensure that each record in a table is unique.</li>\n        <li><b>Maintaining Data Integrity:</b> Keys help prevent data duplication and ensure the accuracy of the data.</li>\n        <li><b>Efficient Data Retrieval:</b> Keys are used to build indexes, making it easier to retrieve data from large datasets.</li>\n        <li><b>Establishing Relationships:</b> Foreign keys help create links between tables, representing real-world relationships.</li>\n        <li><b>Data Security:</b> Keys can be used to control access to sensitive information, limiting access based on specific keys.</li>\n    </ul>\n<blockquote class=\"wp-block-quote is-style-default\"> <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p> </blockquote>"
      },
      {
        "id": "Normalisation-and-its-Types(1NF,-2NF,-3NF)",
        "sl_no_in_step": 5,
        "title": "Normalisation and its Types(1NF, 2NF, 3NF)",
        "yt_link": "https://youtube.com/playlist?list=PLrL_PSQ6q063TCFPEnZXoZpAt3Adhuhsb&si=0BcWeWb4qOzdmJu8",
        "article_link": "https://takeuforward.org/dbms/normalisation-and-its-types",
        "content": "    <p>Normalization is the process of organizing a database to reduce redundancy and dependency. This ensures that each piece of data is stored in one place. We achieve this by splitting data into smaller tables, which follow specific rules known as \"normal forms\" (like 1NF, 2NF, and 3NF). These rules help ensure that each table has a unique identifier (primary key) and that other information (non-key attributes) depends on the primary key.</p>\n\n    <p><b>Why normalize?</b></p>\n    <ul>\n        <li><b>Reduces data duplication:</b> Storing each piece of data only once minimizes inconsistencies and makes data easier to update and manage.</li>\n        <li><b>Improves data consistency:</b> Since each data point exists in only one place, updating it in one spot keeps all your information consistent.</li>\n        <li><b>Minimizes data anomalies:</b> Normalization reduces reliance on other data, making the database easier to understand and use while avoiding issues like insertion, update, and deletion anomalies.</li>\n        <li><b>Enhances scalability and performance:</b> By managing less redundant data, the database becomes faster and easier to maintain.</li>\n    </ul>\n\n    <h3>First Normal Form (1NF)</h3>\n    <p>A table is in 1NF if:</p>\n    <ul>\n        <li>All columns contain atomic (indivisible) values.</li>\n        <li>Each column holds values of a single type.</li>\n        <li>There are no repeating groups or arrays in columns (only one value per row).</li>\n    </ul>\n    <img src=\"https://static.takeuforward.org/content/normalisation-1-pDLA5eDj\" alt=\"1NF Example\">\n\n    <p>This table follows 1NF as it has no composite or multi-valued attributes.</p>\n\n    <h3>Second Normal Form (2NF)</h3>\n    <p>A table is in 2NF if:</p>\n    <ul>\n        <li>It is already in 1NF.</li>\n        <li>All non-key attributes are fully functionally dependent on the entire primary key.</li>\n    </ul>\n    <p>Partial dependency occurs when a non-prime attribute depends on only part of a composite key, violating 2NF rules. Here's an example:</p>\n    <img src=\"https://static.takeuforward.org/content/normalisation-2-2TzjvbU_\" alt=\"2NF Example\">\n\n    <p>In this case, <b>StudentName</b> depends on <b>StudentID</b> and <b>CourseName</b> depends on <b>CourseID</b>, showing partial dependency. To convert this to 2NF, we break it into two tables: one for students and one for courses.</p>\n\n    <h3>Third Normal Form (3NF)</h3>\n    <p>A table is in 3NF if:</p>\n    <ul>\n        <li>It is in 2NF.</li>\n        <li>All attributes are functionally dependent only on the primary key.</li>\n    </ul>\n    <img src=\"https://static.takeuforward.org/content/normalisation-3-uJuMhDE0\" alt=\"3NF Example\">\n\n    <p>This example has a transitive dependency: <b>CustomerName</b> depends on <b>CustomerID</b>, which in turn depends on the primary key. To remove this, we separate customers into a new table, achieving 3NF.</p>\n\n    <h3>Boyce-Codd Normal Form (BCNF)</h3>\n    <p>A table is in BCNF if:</p>\n    <ul>\n        <li>It is in 3NF.</li>\n        <li>For every functional dependency, the left-hand side (X) is a super key.</li>\n    </ul>\n    <img src=\"https://static.takeuforward.org/content/normalisation-5-qxdN0T37\" alt=\"BCNF Example\">\n\n    <p>In BCNF, we further decompose tables to remove any dependencies where X is not a super key. This is demonstrated by breaking down tables in the example.</p>\n\n    <h3>Fourth Normal Form (4NF)</h3>\n    <p>A table is in 4NF if:</p>\n    <ul>\n        <li>It is in BCNF.</li>\n        <li>There are no multi-valued dependencies.</li>\n    </ul>\n    <img src=\"https://static.takeuforward.org/content/normalisation-6-cpXenyNs\" alt=\"4NF Example\">\n\n    <p>Here, we see a multi-valued dependency between Course and Hobby, which is independent of each other. To achieve 4NF, we decompose the table into separate entities.</p>\n\n    <h3>Fifth Normal Form (5NF)</h3>\n    <p>A table is in 5NF if:</p>\n    <ul>\n        <li>It is in 4NF.</li>\n        <li>It cannot be decomposed into smaller tables without losing data or introducing redundancy.</li>\n    </ul>\n    <img src=\"https://static.takeuforward.org/content/normalisation-9-u1xy8yJP\" alt=\"5NF Example\">\n\n    <p>In complex relationships, 5NF ensures no data is lost and no unnecessary redundancy is introduced. The table is broken into smaller ones only when absolutely necessary.</p>\n\n<blockquote class=\"wp-block-quote is-style-default\"> <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p> </blockquote>"
      },
      {
        "id": "Functional-dependency",
        "sl_no_in_step": 6,
        "title": "Functional dependency",
        "yt_link": "https://youtu.be/vO-DLOYpJVk?si=rualZejWcwHhLJCK",
        "article_link": "https://takeuforward.org/dbms/functional-dependency",
        "content": "<p>\n        In a relational database management system, a functional dependency describes the relationship between two sets of attributes where one set determines the value of another. It is written as 𝑋→𝑌, where 𝑋 (the attribute set on the left) is known as the <b>Determinant</b>, and 𝑌 (the attribute set on the right) is known as the <b>Dependent</b>.\n    </p>\n    <p>\n        Functional dependencies help understand how attributes relate to each other in a database, which is crucial for database design and normalization.\n    </p>\n    <img src=\"https://static.takeuforward.org/content/fd-1-OCj6-yLM\" alt=\"Functional Dependency Example\">\n\n    <h3>Types of Functional Dependency</h3>\n\n    <h3>Full Functional Dependency</h3>\n    <p>\n        A functional dependency 𝑋→𝑌 is a <b>full functional dependency</b> if removing any attribute from 𝑋 means the dependency no longer holds. In simpler terms, 𝑌 depends entirely on 𝑋.\n    </p>\n    <p><b>Example:</b> If we have a table Enrollment(StudentID, CourseID, Grade), the dependency (StudentID, CourseID) → Grade is a full functional dependency because neither StudentID nor CourseID alone can determine the Grade.</p>\n\n    <h3>Partial Functional Dependency</h3>\n    <p>\n        A <b>partial functional dependency</b> occurs when only part of a composite primary key determines a non-key attribute.\n    </p>\n    <p><b>Example:</b> In a table Enrollment(StudentID, CourseID, StudentName), StudentName depends only on StudentID and not the entire composite key (StudentID, CourseID). This is a partial functional dependency.</p>\n\n    <h3>Trivial Functional Dependency</h3>\n    <p>\n        A <b>trivial functional dependency</b> happens when the dependent attribute is already part of the determinant attribute set.\n    </p>\n    <p><b>Example:</b> {Roll no., Name} → {Name} is a trivial functional dependency because Name is already part of the determinant (Roll no., Name).</p>\n    <img src=\"https://static.takeuforward.org/content/fd-2-mPlPsxBC\" alt=\"Trivial Functional Dependency\">\n\n    <h3>Non-trivial Functional Dependency</h3>\n    <p>\n        A <b>non-trivial functional dependency</b> occurs when the dependent attribute is not part of the determinant attribute set.\n    </p>\n    <p><b>Example:</b> {Roll no., Name} → {Dept name} is a non-trivial functional dependency because Dept name is not part of {Roll no., Name}.</p>\n\n    <h3>Transitive Dependency</h3>\n    <p>\n        A <b>transitive dependency</b> happens when there is an indirect relationship between attributes. If A → B and B → C, then A → C is a transitive dependency.\n    </p>\n    <p><b>Example:</b> If Roll no. → Dept name and Dept name → Dept building, then Roll no. → Dept building is a transitive dependency.</p>\n    <img src=\"https://static.takeuforward.org/content/fd-3-IqDHN0bv\" alt=\"Transitive Dependency\">\n\n    <h3>Multivalued Dependency</h3>\n    <p>\n        In a <b>multivalued dependency</b>, the dependent attributes are independent of each other. If A → {B, C}, and there is no relationship between B and C, it is called a multivalued dependency.\n    </p>\n    <p><b>Example:</b> Roll no → {Name, Dept name} is a multivalued functional dependency because Name and Dept name are independent.</p>\n\n<blockquote class=\"wp-block-quote is-style-default\"> <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p> </blockquote>"
      },
      {
        "id": "Denormalisation",
        "sl_no_in_step": 7,
        "title": "Denormalisation",
        "yt_link": "https://youtu.be/ialGGDGxQVc?si=CoQIvmrmhQTTUfxs",
        "article_link": "https://takeuforward.org/dbms/denormalisation",
        "content": "    <p><b>Denormalization</b> is the process of combining normalized tables into fewer tables, adding redundancy, or optimizing a database structure to enhance performance. Unlike normalization, which aims to reduce data redundancy and improve data integrity, denormalization focuses on improving the read performance of a database by reducing the complexity of joins between tables.</p>\n    <p><b>Importance:</b> Denormalization can be particularly beneficial in large databases where query performance and data retrieval speed are critical. It provides a way to balance the needs of maintaining data integrity with the practical requirements of quick data access and simpler query structures.</p>\n\n    <h3>Reasons for Denormalization</h3>\n    <p>Denormalization is implemented for various reasons, most of which revolve around improving the performance and efficiency of database operations:</p>\n    <h3>1. Performance Optimization</h3>\n    <p>Denormalization helps optimize the performance of a database by reducing the time required to perform queries, especially when dealing with large datasets. By reducing the need for multiple joins, data retrieval can be faster.</p>\n    <p><b>Example:</b> Consider a sales database where data from multiple tables (customers, products, orders) needs to be frequently queried together. Combining these into a single denormalized table can reduce the time required for queries.</p>\n\n    <h3>2. Query Simplification</h3>\n    <p>By storing redundant data, denormalization can simplify complex SQL queries. Instead of joining multiple normalized tables, denormalized tables can store related data together, making the queries simpler and easier to write.</p>\n    <p><b>Example:</b> A denormalized table storing order information along with customer and product details makes it easier to generate reports without the need for multiple joins.</p>\n\n    <h3>3. Reducing Joins</h3>\n    <p>One of the primary reasons for denormalization is to reduce the number of joins in queries. Joins can be resource-intensive, especially with large tables, so reducing them can enhance overall database performance.</p>\n    <p><b>Example:</b> Instead of joining a product table with a category table every time product data is queried, denormalization could involve storing the category name directly in the product table.</p>\n    \n    <h3>4. Enhancing Data Retrieval</h3>\n    <p>Denormalization can enhance data retrieval times by storing all required data in a single table or by precomputing frequently needed data. This is particularly useful for read-heavy applications where the speed of data retrieval is crucial.</p>\n    <p><b>Example:</b> In an analytics dashboard that frequently needs to access sales data, a denormalized table that pre-aggregates sales figures can provide faster response times for reporting.</p>\n\n    <h3>Techniques for Denormalization</h3>\n    <p>Several techniques are used to achieve denormalization, allowing database administrators to optimize databases according to specific use cases:</p>\n\n    <h3>1. Adding Redundant Data</h3>\n    <p>One technique for denormalization is to store the same data in multiple places. This reduces the need to fetch related information from other tables, thus saving time and computational resources.</p>\n    <p><b>Example:</b> Storing a customer’s address directly in the orders table instead of keeping it in a separate customer table.</p>\n    <pre><code>\n    CREATE TABLE orders (\n        order_id INT,\n        customer_name VARCHAR(100),\n        customer_address VARCHAR(255),\n        order_total DECIMAL(10, 2)\n    );\n    </code></pre>\n\n    <h3>2. Creating Summary Tables</h3>\n    <p>Summary tables are denormalized tables that store precomputed data, such as aggregates or summarized values. This helps speed up queries that would otherwise require expensive calculations.</p>\n    <p><b>Example:</b> A table storing monthly sales totals for each product instead of calculating these totals on the fly during reporting.</p>\n    <pre><code>\n    CREATE TABLE monthly_sales_summary (\n        product_id INT,\n        month DATE,\n        total_sales DECIMAL(10, 2)\n    );\n    </code></pre>\n\n    <h3>3. Storing Derived Values</h3>\n    <p>Derived values are calculated fields that are stored in a table instead of computing them each time they are needed. This can improve the efficiency of queries.</p>\n    <p><b>Example:</b> Storing the age of a customer as a column in the database instead of calculating it every time from the date of birth.</p>\n    <pre><code>\n    ALTER TABLE customers ADD COLUMN age INT;\n    </code></pre>\n\n    <h3>Advantages of Denormalization</h3>\n    <ul>\n        <li><b>Faster Query Performance:</b> Denormalization can significantly improve query performance by reducing the need for complex joins.</li>\n        <li><b>Improved Readability:</b> Simplifies the database schema, making it easier for developers to understand and work with the data.</li>\n        <li><b>Better Reporting:</b> Summary tables can speed up report generation by providing precomputed data.</li>\n    </ul>\n\n    <h3>Disadvantages of Denormalization</h3>\n    <ul>\n        <li><b>Increased Data Redundancy:</b> Denormalization can lead to data duplication, making the database larger and harder to manage.</li>\n        <li><b>Higher Maintenance:</b> Updating data becomes more complex as changes need to be reflected in multiple places.</li>\n        <li><b>Risk of Inconsistency:</b> With data stored in multiple places, there is a higher risk of data becoming inconsistent across different tables.</li>\n    </ul>\n\n<blockquote class=\"wp-block-quote is-style-default\"> <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p> </blockquote>\n"
      }
    ]
  },
  {
    "step_no": 4,
    "topic": "SQL",
    "data": [
      {
        "id": "SQL-Commands-and-its-types",
        "sl_no_in_step": 1,
        "title": "SQL Commands and its types (INSERT, UPDATE, DELETE, SELECT, ALTER)",
        "yt_link": "https://youtube.com/playlist?list=PLrL_PSQ6q063x8ssXJKYNNQ68k8jxbqF0&si=-jmGqY4_Q9IKpOI5",
        "article_link": "https://takeuforward.org/dbms/sql-command-and-their%20types",
        "content": "<p>SQL commands are instructions used to communicate with a database to perform various operations such as creating, reading, updating, and deleting data. These commands are categorized based on their functionality into several types:</p>\n    <ul>\n        <li>Data Definition Language (DDL)</li>\n        <li>Data Manipulation Language (DML)</li>\n        <li>Data Control Language (DCL)</li>\n        <li>Transaction Control Language (TCL)</li>\n        <li>Data Query Language (DQL)</li>\n    </ul>\n\n    <h3>Data Definition Language (DDL)</h3>\n    <p>DDL commands define and manage database schema and structure.</p>\n\n    <h3>CREATE</h3>\n    <p>Creates new database objects such as tables, views, and indexes.</p>\n\n    <pre><code>CREATE TABLE employees (\n    id INT PRIMARY KEY,\n    name VARCHAR(100),\n    position VARCHAR(50),\n    salary DECIMAL(10, 2)\n);</code></pre>\n\n    <p><img src=\"https://static.takeuforward.org/content/commands-2-Ofrhg308\" alt=\"CREATE Command Example\"></p>\n\n    <h3>DROP</h3>\n    <p>Deletes existing database objects.</p>\n\n    <pre><code>DROP TABLE employees;</code></pre>\n\n    <h3>ALTER</h3>\n    <p>Modifies existing database objects.</p>\n\n    <pre><code>ALTER TABLE employees\nADD COLUMN department VARCHAR(50);</code></pre>\n\n    <p><img src=\"https://static.takeuforward.org/content/commands-3-pAvHObpV\" alt=\"ALTER Command Example\"></p>\n\n    <h3>TRUNCATE</h3>\n    <p>Removes all records from a table but retains its structure.</p>\n\n    <pre><code>TRUNCATE TABLE employees;</code></pre>\n\n    <h3>Data Manipulation Language (DML)</h3>\n    <p>DML commands manage data within schema objects.</p>\n\n    <h3>INSERT</h3>\n    <p>Adds new rows to a table.</p>\n\n    <pre><code>INSERT INTO employees (id, name, position, salary)\nVALUES (1, 'John Doe', 'Manager', 60000.00);</code></pre>\n\n    <p><img src=\"https://static.takeuforward.org/content/commands-4-4qtVMlLE\" alt=\"INSERT Command Example\"></p>\n\n    <h3>UPDATE</h3>\n    <p>Modifies existing rows in a table.</p>\n\n    <pre><code>UPDATE employees\nSET salary = 65000.00\nWHERE id = 1;</code></pre>\n\n    <p><img src=\"https://static.takeuforward.org/content/commands-5-qf7rtC1h\" alt=\"UPDATE Command Example\"></p>\n\n    <h3>DELETE</h3>\n    <p>Removes existing rows from a table.</p>\n\n    <pre><code>DELETE FROM employees\nWHERE id = 1;</code></pre>\n\n    <h3>SELECT</h3>\n    <p>Retrieves data from one or more tables.</p>\n\n    <pre><code>SELECT id, name, position, salary\nFROM employees;</code></pre>\n\n    <p><img src=\"https://static.takeuforward.org/content/commands-6-u3b6QwkQ\" alt=\"SELECT Command Example\"></p>\n\n    <h3>Data Control Language (DCL)</h3>\n    <p>DCL commands manage access to data within the database.</p>\n\n    <h3>GRANT</h3>\n    <p>Gives a user access privileges to the database.</p>\n\n    <pre><code>GRANT SELECT, INSERT, UPDATE ON employees TO user_name;</code></pre>\n\n    <h3>REVOKE</h3>\n    <p>Removes access privileges from a user.</p>\n\n    <pre><code>REVOKE SELECT, INSERT, UPDATE ON employees FROM user_name;</code></pre>\n\n    <h3>Transaction Control Language (TCL)</h3>\n    <p>TCL commands manage the transactions within a database.</p>\n\n    <h3>COMMIT</h3>\n    <p>Saves all changes made in the current transaction.</p>\n\n    <pre><code>COMMIT;</code></pre>\n\n    <h3>ROLLBACK</h3>\n    <p>Undoes changes made in the current transaction.</p>\n\n    <pre><code>ROLLBACK;</code></pre>\n\n    <h3>SAVEPOINT</h3>\n    <p>Sets a point within a transaction to which you can later roll back.</p>\n\n    <pre><code>SAVEPOINT savepoint_name;</code></pre>\n\n    <h3>Data Query Language (DQL)</h3>\n    <p>DQL is used to retrieve data from a database.</p>\n\n    <h3>SELECT</h3>\n    <pre><code>SELECT column1, column2, ...\nFROM table_name;</code></pre>\n\n    <blockquote>\n        <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n    </blockquote>"
      },
      {
        "id": "Operators-and-Aggregation-in-SQL",
        "sl_no_in_step": 2,
        "title": "Operators and Aggregation in SQL",
        "yt_link": "https://youtube.com/playlist?list=PLrL_PSQ6q060tk7jyHzTvhQdQqYjpsTMt&si=-EQVBs3SkqiF0AB-",
        "article_link": "https://takeuforward.org/dbms/operators-aggregations-in-sql",
        "content": "    <p>In SQL, <b>operators</b> and <b>aggregation functions</b> are essential for performing calculations, comparisons, and data analysis. Operators allow you to manipulate data in queries, while aggregate functions summarize data. Understanding these concepts enables efficient data retrieval and manipulation in databases.</p>\n\n    <h3>Types of Operators</h3>\n    <p>SQL operators can be categorized into different types based on their functionality:</p>\n\n    <h3>1. Arithmetic Operators</h3>\n    <p><b>Arithmetic operators</b> are used to perform mathematical calculations like addition, subtraction, multiplication, and division on numerical data.</p>\n    <ul>\n        <li><b>Addition (+):</b> Adds two numbers.</li>\n        <li><b>Subtraction (-):</b> Subtracts one number from another.</li>\n        <li><b>Multiplication (*):</b> Multiplies two numbers.</li>\n        <li><b>Division (/):</b> Divides one number by another.</li>\n    </ul>\n    <p><b>Example:</b> Calculate the total salary of an employee including a bonus.</p>\n    <pre><code>\n    SELECT salary + bonus AS total_salary \n    FROM employees;\n    </code></pre>\n    <p>This query adds the <code>salary</code> and <code>bonus</code> fields to calculate the total salary.</p>\n\n    <h3>2. Comparison Operators</h3>\n    <p><b>Comparison operators</b> are used to compare values and return true or false based on the condition. They are commonly used in the <code>WHERE</code> clause to filter data.</p>\n    <ul>\n        <li><b>Equals (=):</b> Checks if two values are equal.</li>\n        <li><b>Not Equals (<>):</b> Checks if two values are not equal.</li>\n        <li><b>Greater Than (&gt;):</b> Checks if one value is greater than another.</li>\n        <li><b>Less Than (&lt;):</b> Checks if one value is less than another.</li>\n    </ul>\n    <p><b>Example:</b> Find employees with a salary greater than 5000.</p>\n    <pre><code>\n    SELECT name \n    FROM employees \n    WHERE salary &gt; 5000;\n    </code></pre>\n    <p>This query retrieves the names of employees whose salary is greater than 5000.</p>\n\n    <h3>3. Logical Operators</h3>\n    <p><b>Logical operators</b> are used to combine multiple conditions in SQL queries. They help refine searches and filters.</p>\n    <ul>\n        <li><b>AND:</b> Returns true if all conditions are true.</li>\n        <li><b>OR:</b> Returns true if any condition is true.</li>\n        <li><b>NOT:</b> Reverses the result of a condition.</li>\n    </ul>\n    <p><b>Example:</b> Find employees who work in the 'Sales' department and earn more than 4000.</p>\n    <pre><code>\n    SELECT name \n    FROM employees \n    WHERE department = 'Sales' AND salary &gt; 4000;\n    </code></pre>\n    <p>This query retrieves the names of employees who are in the 'Sales' department and have a salary greater than 4000.</p>\n\n    <h3>Aggregate Functions in SQL</h3>\n    <p><b>Aggregate functions</b> in SQL perform calculations on a set of values and return a single value. They are commonly used with the <code>GROUP BY</code> clause to summarize data.</p>\n    \n    <h3>Types of Aggregate Functions</h3>\n    <ul>\n        <li><b>COUNT:</b> Returns the number of rows that match a specified condition.</li>\n        <li><b>SUM:</b> Adds up the values of a specified column.</li>\n        <li><b>AVG:</b> Calculates the average value of a column.</li>\n        <li><b>MAX:</b> Returns the highest value in a column.</li>\n        <li><b>MIN:</b> Returns the lowest value in a column.</li>\n    </ul>\n    \n    <h3>Examples of Aggregate Functions</h3>\n    <p><b>Example 1: COUNT</b></p>\n    <p>Find the total number of employees in the company.</p>\n    <pre><code>\n    SELECT COUNT(*) AS total_employees \n    FROM employees;\n    </code></pre>\n    <p>This query counts the total number of rows in the <code>employees</code> table.</p>\n    \n    <p><b>Example 2: SUM</b></p>\n    <p>Calculate the total sales made by the company.</p>\n    <pre><code>\n    SELECT SUM(sales) AS total_sales \n    FROM sales_data;\n    </code></pre>\n    <p>This query adds up the values in the <code>sales</code> column to get the total sales amount.</p>\n    \n    <p><b>Example 3: AVG</b></p>\n    <p>Find the average salary of employees in the 'IT' department.</p>\n    <pre><code>\n    SELECT AVG(salary) AS average_salary \n    FROM employees \n    WHERE department = 'IT';\n    </code></pre>\n    <p>This query calculates the average salary of employees in the 'IT' department.</p>\n\n    <p><b>Example 4: MAX and MIN</b></p>\n    <p>Get the highest and lowest salaries in the company.</p>\n    <pre><code>\n    SELECT MAX(salary) AS highest_salary, MIN(salary) AS lowest_salary \n    FROM employees;\n    </code></pre>\n    <p>This query retrieves the maximum and minimum salary values from the <code>employees</code> table.</p>\n\n    <img src=\"https://static.takeuforward.org/content/-TFoSx0Es\" alt=\"SQL Aggregation Example\">\n\n    <h3>When to Use Operators and Aggregation Functions?</h3>\n    <p>Operators and aggregation functions are essential when you need to:</p>\n    <ul>\n        <li>Filter data based on conditions using comparison and logical operators.</li>\n        <li>Perform calculations like adding or multiplying values using arithmetic operators.</li>\n        <li>Summarize data using aggregate functions to find totals, averages, or maximum and minimum values.</li>\n    </ul>\n\n<blockquote class=\"wp-block-quote is-style-default\"> <p>Special thanks to <strong>Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p> </blockquote>"
      },
      {
        "id": "SQL-clauses",
        "sl_no_in_step": 3,
        "title": "SQL clauses (WHERE, GROUP BY, HAVING, ORDER BY, LIMIT)",
        "yt_link": "https://youtube.com/playlist?list=PLrL_PSQ6q060H57tDs2P914KVfSf5cp33&si=wBFBu6EzRmLg8AsS",
        "article_link": "https://takeuforward.org/dbms/sql-clauses",
        "content": "<p>SQL clauses are used to perform various operations on data within a database. They help retrieve a set or bundles of records from the table and specify a condition on the columns or the records of a table.</p>\n    \n    <h3>Employee Table</h3>\n    <p>We will be using the Employee table to run different SQL clauses and analyze their outputs.</p>\n    <img src=\"https://static.takeuforward.org/content/clause-1-om7XTYCo\" alt=\"Employee Table\" style=\"max-width: 600px;\">\n\n    <h3>WHERE CLAUSE</h3>\n    <p>The WHERE clause is used to filter records that meet certain criteria. It is used in SELECT, UPDATE, DELETE, and INSERT statements.</p>\n\n    <h4>Syntax:</h4>\n    <pre><code>SELECT column1, column2, ...\nFROM table_name\nWHERE condition;</code></pre>\n\n    <h4>Performance Considerations:</h4>\n    <ul>\n        <li>Ensure that columns used in the WHERE clause are indexed to improve query performance.</li>\n        <li>Avoid complex conditions that can slow down the query.</li>\n        <li>Use proper comparison operators and avoid using functions on indexed columns in the WHERE clause as this can prevent using indexes.</li>\n    </ul>\n\n    <p>Example: All employees with a salary greater than 8000 are printed in the output.</p>\n    <img src=\"https://static.takeuforward.org/content/clause-3-p7BWfgwe\" alt=\"WHERE Clause Example\" style=\"max-width: 600px;\">\n\n    <h3>GROUP BY CLAUSE</h3>\n    <p>The GROUP BY clause groups rows that have the same values in specified columns into summary rows, often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG).</p>\n\n    <h4>Syntax:</h4>\n    <pre><code>SELECT column1, COUNT(*)\nFROM table_name\nGROUP BY column1;</code></pre>\n\n    <h4>Performance Considerations:</h4>\n    <ul>\n        <li>Indexes on the columns used in GROUP BY can improve performance.</li>\n        <li>Grouping large datasets can be resource-intensive, so ensure that the necessary resources are available.</li>\n    </ul>\n\n    <p>Example: Group by clause on the city type returns the number of people from a particular city from the given employee table.</p>\n    <img src=\"https://static.takeuforward.org/content/clause-3-p7BWfgwe\" alt=\"GROUP BY Clause Example\" style=\"max-width: 600px;\">\n\n    <h3>HAVING CLAUSE</h3>\n    <p>The HAVING clause filters groups of rows created by the GROUP BY clause based on a specified condition, often used with aggregate functions.</p>\n\n    <h4>Syntax:</h4>\n    <pre><code>SELECT column1, aggregate_function(column2)\nFROM table_name\nGROUP BY column1\nHAVING condition;</code></pre>\n\n    <h4>Performance Considerations:</h4>\n    <ul>\n        <li>The HAVING clause is generally less efficient than the WHERE clause because it operates on the result set after all rows have been processed and grouped.</li>\n        <li>To optimize performance, filter as much data as possible using the WHERE clause before applying the HAVING clause.</li>\n        <li>Indexing the columns used in the GROUP BY clause can help improve performance.</li>\n    </ul>\n\n    <p>Example: This query first groups the employees by City and then filters the groups to include only those with more than one employee.</p>\n    <img src=\"https://static.takeuforward.org/content/clause-4-hwpxyZG_\" alt=\"HAVING Clause Example\" style=\"max-width: 600px;\">\n\n    <h3>ORDER BY CLAUSE</h3>\n    <p>The ORDER BY clause sorts the result set of a query by one or more columns in ascending (ASC) or descending (DESC) order.</p>\n\n    <h4>Syntax:</h4>\n    <pre><code>SELECT column1, column2, ...\nFROM table_name\nORDER BY column1 [ASC|DESC], column2 [ASC|DESC], ...;</code></pre>\n\n    <h4>Performance Considerations:</h4>\n    <ul>\n        <li>Sorting large datasets can be resource-intensive and slow down query performance.</li>\n        <li>Indexing the columns used in the ORDER BY clause can significantly improve performance.</li>\n        <li>Use LIMIT to reduce the number of rows returned and minimize the sorting overhead.</li>\n    </ul>\n\n    <p>Example: This query selects all columns from the Employee table and sorts the results by the Salary column in descending order, showing the highest salaries first.</p>\n    <img src=\"https://static.takeuforward.org/content/clause-5-ijGQMSn3\" alt=\"ORDER BY Clause Example\" style=\"max-width: 600px;\">\n\n    <h3>LIMIT CLAUSE</h3>\n    <p>The LIMIT clause specifies the number of records to return from the result set, often used with ORDER BY for pagination or to get the top N records.</p>\n\n    <h4>Syntax:</h4>\n    <pre><code>SELECT column1, column2, ...\nFROM table_name\nORDER BY column_name [ASC|DESC]\nLIMIT number_of_records [OFFSET offset_value];</code></pre>\n\n    <h4>Performance Considerations:</h4>\n    <ul>\n        <li>The LIMIT clause is efficient when you only need a subset of rows, as it reduces the amount of data the database needs to return.</li>\n        <li>Using OFFSET with large values can impact performance because the database still needs to process and sort the entire result set before applying the offset.</li>\n        <li>Ensure that the columns used in the ORDER BY clause are indexed, especially when dealing with large datasets.</li>\n    </ul>\n\n    <p>Example: This query selects all columns from the Employee table, orders the results by Salary in descending order, and limits the result to the top 3 highest-paid employees.</p>\n    <img src=\"https://static.takeuforward.org/content/clause-6-zesCey00\" alt=\"LIMIT Clause Example\" style=\"max-width: 600px;\">\n\n    <blockquote>\n        <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n    </blockquote>\n"
      },
      {
        "id": "Joins-in-SQL",
        "sl_no_in_step": 4,
        "title": "Joins in SQL(INNER JOIN, OUTER JOIN, LEFT JOIN RIGHT JOIN)",
        "yt_link": "https://youtube.com/playlist?list=PLrL_PSQ6q060ejhwWVOpOiCKMOunJvPlz&si=RD_krmxL5r8efkAE",
        "article_link": "https://takeuforward.org/dbms/joins-in-sql",
        "content": "    <p>In SQL, <b>joins</b> are used to combine records from two or more tables based on a related column between them. They help to bring data together, making it possible to query data from multiple tables in a relational database.</p>\n    <p>There are different types of joins that are commonly used, each with its own purpose and behavior. These include:</p>\n    <ul>\n        <li>INNER JOIN</li>\n        <li>OUTER JOIN</li>\n        <li>LEFT JOIN</li>\n        <li>RIGHT JOIN</li>\n    </ul>\n\n<img src=\"https://static.takeuforward.org/content/-wb-tvGsG\">\n\n    <h3>1. INNER JOIN</h3>\n    <p>The <b>INNER JOIN</b> returns only those records that have matching values in both tables. It excludes rows that do not have a match in one of the tables.</p>\n    <p><b>Usage:</b> Use INNER JOIN when you want to select only the rows that have corresponding matches in both tables.</p>\n    <p><b>Syntax:</b></p>\n    <pre><code>\n    SELECT column_name(s)\n    FROM table1\n    INNER JOIN table2\n    ON table1.common_column = table2.common_column;\n    </code></pre>\n    <p><b>Example:</b> Get the list of customers who have placed orders.</p>\n    <pre><code>\n    SELECT customers.customer_id, customers.customer_name, orders.order_id\n    FROM customers\n    INNER JOIN orders ON customers.customer_id = orders.customer_id;\n    </code></pre>\n    <p><b>Performance Consideration:</b> INNER JOIN can be efficient when tables have a strong relationship through foreign keys. However, it may perform poorly if the dataset is large and the join condition is complex.</p>\n\n<img src=\"https://static.takeuforward.org/content/-ckzF1K-A\">\n\n    <h3>2. OUTER JOIN</h3>\n    <p>An <b>OUTER JOIN</b> returns all records when there is a match in either left or right table records. There are two types of OUTER JOIN:</p>\n    <ul>\n        <li>LEFT JOIN (or LEFT OUTER JOIN)</li>\n        <li>RIGHT JOIN (or RIGHT OUTER JOIN)</li>\n    </ul>\n    <p><b>Usage:</b> Use OUTER JOIN when you want to retain all rows from one or both tables, even if there is no match between them.</p>\n\n<img src=\"https://static.takeuforward.org/content/-CXr5zY12\">\n\n    <h3>3. LEFT JOIN</h3>\n    <p>The <b>LEFT JOIN</b> returns all records from the left table and the matched records from the right table. If there is no match, the result is <code>NULL</code> on the side of the right table.</p>\n    <p><b>Syntax:</b></p>\n    <pre><code>\n    SELECT column_name(s)\n    FROM table1\n    LEFT JOIN table2\n    ON table1.common_column = table2.common_column;\n    </code></pre>\n    <p><b>Example:</b> Retrieve all customers and their orders, including customers who have not placed any orders.</p>\n    <pre><code>\n    SELECT customers.customer_id, customers.customer_name, orders.order_id\n    FROM customers\n    LEFT JOIN orders ON customers.customer_id = orders.customer_id;\n    </code></pre>\n    <p><b>Performance Consideration:</b> LEFT JOIN is generally used when the left table has many rows that should be retained even if there are no corresponding records in the right table. It may be slower than INNER JOIN because it has to retain unmatched rows.</p>\n\n    <h3>4. RIGHT JOIN</h3>\n    <p>The <b>RIGHT JOIN</b> returns all records from the right table and the matched records from the left table. If there is no match, the result is <code>NULL</code> on the side of the left table.</p>\n    <p><b>Syntax:</b></p>\n    <pre><code>\n    SELECT column_name(s)\n    FROM table1\n    RIGHT JOIN table2\n    ON table1.common_column = table2.common_column;\n    </code></pre>\n    <p><b>Example:</b> Retrieve all orders and the customers who placed them, including orders that do not have associated customer details.</p>\n    <pre><code>\n    SELECT customers.customer_id, customers.customer_name, orders.order_id\n    FROM customers\n    RIGHT JOIN orders ON customers.customer_id = orders.customer_id;\n    </code></pre>\n    <p><b>Performance Consideration:</b> RIGHT JOIN can be useful when all rows from the right table are required, even if there are no matching rows in the left table. Similar to LEFT JOIN, it can be slower than INNER JOIN.</p>\n\n\n    <h3>5. FULL OUTER JOIN</h3>\n    <p>The <b>FULL OUTER JOIN</b> returns all records when there is a match in either left or right table records. This join combines the result of LEFT JOIN and RIGHT JOIN, returning rows that have matches in both tables and rows with unmatched data in either table.</p>\n    <p><b>Syntax:</b></p>\n    <pre><code>\n    SELECT column_name(s)\n    FROM table1\n    FULL OUTER JOIN table2\n    ON table1.common_column = table2.common_column;\n    </code></pre>\n    <p><b>Example:</b> Get all customers and all orders, including those that do not have a corresponding match in the other table.</p>\n    <pre><code>\n    SELECT customers.customer_id, customers.customer_name, orders.order_id\n    FROM customers\n    FULL OUTER JOIN orders ON customers.customer_id = orders.customer_id;\n    </code></pre>\n    <p><b>Performance Consideration:</b> FULL OUTER JOIN can be resource-intensive and slower because it has to combine unmatched records from both tables. It is less commonly used than other joins.</p>\n\n    <h3>Conclusion</h3>\n    <p>Joins are essential tools in SQL for combining data from multiple tables. Choosing the right type of join—whether it’s <b>INNER JOIN</b>, <b>LEFT JOIN</b>, <b>RIGHT JOIN</b>, or <b>FULL OUTER JOIN</b>—depends on the data relationship and the specific requirements of your query. Understanding their differences helps in writing efficient SQL queries and achieving the desired results from relational databases.</p>\n\n<blockquote class=\"wp-block-quote is-style-default\"> <p>Special thanks to <strong>Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p> </blockquote>"
      },
      {
        "id": "Unions-in-SQL",
        "sl_no_in_step": 5,
        "title": "Unions in SQL",
        "yt_link": "https://youtu.be/uwW0nFGHK1M?si=qaHMAHHM4fvqdHkc",
        "article_link": "https://takeuforward.org/dbms/sql-unions",
        "content": " <p>UNION and UNION ALL are SQL operators used to combine the results of two or more SELECT statements.</p>\n    <ul>\n        <li><strong>UNION:</strong> Removes duplicate records from the result set, ensuring each row is unique.</li>\n        <li><strong>UNION ALL:</strong> Includes all duplicates, showing all results from both queries.</li>\n    </ul>\n\n    <h3>The basic syntax of UNION:</h3>\n    <pre><code>SELECT column1, column2, ...\nFROM table1\nUNION\nSELECT column1, column2, ...\nFROM table2;</code></pre>\n    <p>Combines the result sets of two SELECT statements and removes duplicate records.</p>\n\n    <h3>The basic syntax of UNION ALL:</h3>\n    <pre><code>SELECT column1, column2, ...\nFROM table1\nUNION ALL\nSELECT column1, column2, ...\nFROM table2;</code></pre>\n    <p>Combines the result sets of two SELECT statements and includes all duplicates.</p>\n\n    <h3>Example:</h3>\n    <p>There are two tables:</p>\n    <img src=\"https://static.takeuforward.org/content/union-1-oIMs75Aj\" alt=\"Example Tables\" style=\"max-width: 600px;\">\n\n    <h4>UNION:</h4>\n    <img src=\"https://static.takeuforward.org/content/union-3-b5rPwT2A\" alt=\"UNION Example\" style=\"max-width: 600px;\">\n\n    <h4>UNION ALL:</h4>\n    <img src=\"https://static.takeuforward.org/content/union-2-CBBvbsgc\" alt=\"UNION ALL Example\" style=\"max-width: 600px;\">\n    \n    <p>We observe that in UNION ALL, “Bob” is not duplicated in output even though it is present in both tables. However, using UNION, all the records are seen in the table.</p>\n\n    <blockquote>\n        <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n    </blockquote>"
      },
      {
        "id": "Views-in-SQL",
        "sl_no_in_step": 6,
        "title": "Views in SQL",
        "yt_link": "https://youtu.be/JAfNflsD3co?si=HjzLmPQ8pgP3xji_",
        "article_link": "https://takeuforward.org/dbms/database-views",
        "content": " <h3>Views in SQL: Definition and Purpose</h3>\n    <p>A <b>view</b> in SQL is a virtual table that is based on the result set of an SQL query. Views do not store the actual data but present data retrieved from one or more tables. They are used to simplify complex queries, enhance security by limiting access to specific data, and encapsulate logic.</p>\n    <p><b>Purpose:</b> Views serve several purposes in SQL:</p>\n    <ul>\n        <li>Simplifying complex queries by hiding underlying joins and filters.</li>\n        <li>Restricting access to specific data for security purposes.</li>\n        <li>Presenting aggregated or calculated results in a simplified form.</li>\n        <li>Ensuring backward compatibility when the structure of underlying tables changes.</li>\n    </ul>\n<img src=\"https://static.takeuforward.org/content/-LtsTcw6m\">\n\n    <h3>Syntax for Creating Views</h3>\n    <p>The basic syntax for creating a view is as follows:</p>\n    <pre><code>\n    CREATE VIEW view_name AS \n    SELECT column1, column2, ...\n    FROM table_name\n    WHERE condition;\n    </code></pre>\n    <p>In this syntax:</p>\n    <ul>\n        <li><b>view_name:</b> The name of the view you are creating.</li>\n        <li><b>SELECT column1, column2:</b> The columns you want to include in the view.</li>\n        <li><b>table_name:</b> The table from which data is being retrieved.</li>\n        <li><b>WHERE condition:</b> The condition for filtering the data.</li>\n    </ul>\n    <p><b>Example:</b> Create a view that shows only the employees from the Sales department:</p>\n    <pre><code>\n    CREATE VIEW SalesEmployees AS \n    SELECT employee_id, name, salary \n    FROM employees \n    WHERE department = 'Sales';\n    </code></pre>\n\n    <h3>Updating Views</h3>\n    <p>Views can be updated under certain conditions, but not all views are updatable, especially complex views that include joins or aggregations. The syntax for updating data through a view is similar to updating a table.</p>\n    <pre><code>\n    UPDATE view_name \n    SET column_name = value \n    WHERE condition;\n    </code></pre>\n    <p><b>Example:</b> Update the salary of a sales employee in the <code>SalesEmployees</code> view:</p>\n    <pre><code>\n    UPDATE SalesEmployees \n    SET salary = 60000 \n    WHERE employee_id = 101;\n    </code></pre>\n    <p>Note that updates are applied to the underlying table through the view.</p>\n\n    <h3>Dropping Views</h3>\n    <p>To remove a view from the database, you can use the <code>DROP VIEW</code> statement. Dropping a view does not affect the underlying data.</p>\n    <pre><code>\n    DROP VIEW view_name;\n    </code></pre>\n    <p><b>Example:</b> Drop the <code>SalesEmployees</code> view:</p>\n    <pre><code>\n    DROP VIEW SalesEmployees;\n    </code></pre>\n\n    <h3>Types of Views</h3>\n\n    <h3>1. Simple Views</h3>\n    <p>A <b>simple view</b> is based on a single table and does not involve any complex logic such as joins or aggregations. Simple views are usually updatable.</p>\n    <p><b>Example:</b> Create a simple view showing the names and salaries of all employees:</p>\n    <pre><code>\n    CREATE VIEW EmployeeSalaries AS \n    SELECT name, salary \n    FROM employees;\n    </code></pre>\n\n<img src=\"https://static.takeuforward.org/content/-WawoE2Qz\">\n\n    <h3>2. Complex Views</h3>\n    <p>A <b>complex view</b> involves multiple tables, joins, or aggregations, and is usually not updatable. These views are useful for presenting complex relationships or aggregated data in a simplified way.</p>\n    <p><b>Example:</b> Create a complex view that shows the total salary for each department:</p>\n    <pre><code>\n    CREATE VIEW DepartmentSalaries AS \n    SELECT department, SUM(salary) AS total_salary \n    FROM employees \n    GROUP BY department;\n    </code></pre>\n<img src=\"https://static.takeuforward.org/content/-fFOHv97V\">\n    <h3>3. Inline Views</h3>\n    <p>An <b>inline view</b> is not a permanent view but a subquery in the <code>FROM</code> clause of a SQL query. It behaves like a temporary view and can simplify the query structure.</p>\n    <p><b>Example:</b> Use an inline view to find the average salary of employees in each department:</p>\n    <pre><code>\n    SELECT department, avg_salary \n    FROM (SELECT department, AVG(salary) AS avg_salary \n          FROM employees \n          GROUP BY department);\n    </code></pre>\n\n    <h3>4. Materialized Views</h3>\n    <p>A <b>materialized view</b> stores the results of a query physically, unlike regular views that store only the query. Materialized views are used when performance is critical, as they allow faster access to precomputed data. However, they need to be refreshed periodically to ensure the data is up-to-date.</p>\n    <p><b>Example:</b> Create a materialized view for quickly accessing total sales data:</p>\n    <pre><code>\n    CREATE MATERIALIZED VIEW TotalSales AS \n    SELECT SUM(amount) AS total_sales \n    FROM sales;\n    </code></pre>\n\n    <h3>Advantages of Views</h3>\n    <ul>\n        <li><b>Data Security:</b> Views can limit access to specific columns or rows, improving security by hiding sensitive data.</li>\n        <li><b>Query Simplification:</b> Complex queries can be simplified through views, allowing users to retrieve relevant data without needing to understand the underlying complexity.</li>\n        <li><b>Logical Data Independence:</b> Views allow users to access data in a consistent format, even when the structure of the underlying tables changes.</li>\n        <li><b>Performance:</b> Materialized views improve performance by storing precomputed results.</li>\n    </ul>\n\n    <h3>Disadvantages of Views</h3>\n    <ul>\n        <li><b>Performance Overhead:</b> Regular views can slow down queries since they need to be recomputed every time they are accessed.</li>\n        <li><b>Limited Updatability:</b> Not all views are updatable, especially complex ones involving joins and aggregations.</li>\n        <li><b>Storage:</b> Materialized views require additional storage since they physically store data.</li>\n    </ul>\n\n<blockquote class=\"wp-block-quote is-style-default\"> <p>Special thanks to <strong>Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p> </blockquote>"
      },
      {
        "id": "SQL-Sub-Queries",
        "sl_no_in_step": 7,
        "title": "SQL Sub Queries",
        "yt_link": "https://youtu.be/HG1uWJaLDqM?si=UUtNj1fvfJVr2VWK",
        "article_link": "https://takeuforward.org/dbms/sql-subqueries",
        "content": "    <p>SQL subqueries are queries embedded within another SQL query. They are typically used to retrieve data that will be used in the outer query to perform further operations. Subqueries allow for more complex data retrieval and manipulation.</p>\n    <p><b>Purpose:</b> Subqueries are used for a variety of purposes, including:</p>\n    <ul>\n        <li>Filtering data with conditions that depend on other tables.</li>\n        <li>Performing calculations before returning the final results.</li>\n        <li>Using the result of a subquery as a value for the outer query.</li>\n        <li>Creating complex queries without using joins.</li>\n    </ul>\n    <img src=\"https://static.takeuforward.org/content/-Ri2qMI0R\" alt=\"Subquery Visualization\" width=\"400\">\n    \n    <h3>Types of Subqueries</h3>\n    <p>Subqueries can be categorized into different types based on their structure and the number of rows they return. The main types include:</p>\n\n    <h3>1. Single-row Subquery</h3>\n    <p>A <b>single-row subquery</b> returns only one row as its result. It is commonly used with comparison operators like <code>=</code>, <code>&gt;</code>, <code>&lt;</code>, and <code>&lt;=</code>.</p>\n    <p><b>Example:</b> Find the employee with the highest salary.</p>\n    <pre><code>\n    SELECT * \n    FROM employees \n    WHERE salary = (SELECT MAX(salary) FROM employees);\n    </code></pre>\n    <p>This query retrieves the details of the employee whose salary is equal to the highest salary in the <code>employees</code> table.</p>\n\n    <h3>2. Multiple-row Subquery</h3>\n    <p>A <b>multiple-row subquery</b> returns more than one row as its result. It is often used with operators like <code>IN</code>, <code>ANY</code>, and <code>ALL</code>.</p>\n    <p><b>Example:</b> Get the names of employees who earn a salary higher than the average salary of their department.</p>\n    <pre><code>\n    SELECT name \n    FROM employees \n    WHERE salary &gt; (SELECT AVG(salary) FROM employees GROUP BY department_id);\n    </code></pre>\n    <p>This query retrieves the names of employees whose salaries are greater than the average salary in their respective departments.</p>\n\n    <h3>3. Correlated Subquery</h3>\n    <p>A <b>correlated subquery</b> references columns from the outer query and is executed once for each row processed by the outer query. This type of subquery depends on the outer query for its values.</p>\n    <p><b>Example:</b> Find employees whose salaries are above the average salary in their respective departments.</p>\n    <pre><code>\n    SELECT name, salary \n    FROM employees e1 \n    WHERE salary &gt; (SELECT AVG(salary) \n                      FROM employees e2 \n                      WHERE e1.department_id = e2.department_id);\n    </code></pre>\n    <p>In this query, the subquery calculates the average salary for each department, and the outer query checks if an employee's salary is higher than that average.</p>\n\n    <h3>4. Nested Subquery</h3>\n    <p>A <b>nested subquery</b> is a subquery that is nested inside another subquery. It allows for more complex queries by nesting multiple levels of subqueries.</p>\n    <p><b>Example:</b> Find the names of employees who have a higher salary than the lowest salary in the 'Sales' department.</p>\n    <pre><code>\n    SELECT name \n    FROM employees \n    WHERE salary &gt; (SELECT MIN(salary) \n                      FROM employees \n                      WHERE department = 'Sales');\n    </code></pre>\n    <p>This query retrieves the names of employees whose salaries are greater than the minimum salary in the 'Sales' department.</p>\n    <img src=\"https://static.takeuforward.org/content/-EAC5zkxi\" alt=\"Nested Subquery Visualization\">\n\n    <h3>When to Use SQL Subqueries?</h3>\n    <p>Subqueries can be especially useful in the following scenarios:</p>\n    <ul>\n        <li>When a query needs to perform a calculation or retrieve a value from another table without using a join.</li>\n        <li>When a query's condition depends on aggregated data.</li>\n        <li>When combining results from multiple tables in complex ways.</li>\n        <li>When working with conditional logic, such as retrieving data that meets certain criteria based on other data.</li>\n    </ul>\n\n    <h3>Advantages of SQL Subqueries</h3>\n    <ul>\n        <li><b>Simplicity:</b> Subqueries can make complex queries easier to read and understand by breaking them down into smaller parts.</li>\n        <li><b>Modularity:</b> Subqueries can be reused and modified without affecting the outer query.</li>\n        <li><b>Flexibility:</b> Subqueries provide a way to retrieve data without the need for joins.</li>\n    </ul>\n\n    <h3>Disadvantages of SQL Subqueries</h3>\n    <ul>\n        <li><b>Performance:</b> Subqueries can be less efficient than joins, especially in large datasets, as they may execute multiple times.</li>\n        <li><b>Complexity:</b> Correlated subqueries can become complex and difficult to optimize.</li>\n    </ul>\n\n    <h3>Conclusion</h3>\n    <p>SQL subqueries are a powerful tool for writing complex queries and retrieving data that depends on calculations or values from other tables. Understanding the types and use cases of subqueries helps in creating more effective and efficient SQL queries, making it easier to handle complex data scenarios in databases.</p>\n\n<blockquote class=\"wp-block-quote is-style-default\"> <p>Special thanks to <strong>Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p> </blockquote>"
      }
    ]
  },
  {
    "step_no": 5,
    "topic": "Transactions and Concurrency Control",
    "data": [
      {
        "id": "ACID-properties",
        "sl_no_in_step": 1,
        "title": "ACID properties",
        "yt_link": "https://youtu.be/V-1lY1JWhcY?si=26Dbkk573YcMHELg",
        "article_link": "https://takeuforward.org/dbms/acid-properties",
        "content": "<p>A transaction in a Database Management System (DBMS) is a single logical unit of work that accesses and possibly alters the contents of a database. Transactions use read-and-write operations to manage data. Certain properties are adhered to in order to ensure database consistency before and after a transaction. These properties are known as ACID properties.</p>\n    \n    <img src=\"https://static.takeuforward.org/content/acid-1-TWkMASfo\" alt=\"ACID Properties Overview\" style=\"max-width: 600px;\">\n\n    <h3>Atomicity</h3>\n    <p>Atomicity means that either the entire transaction is executed, or none of it is. There is no partial execution. Each transaction is seen as a single unit that either completes fully or does not execute at all. This involves two operations:</p>\n    <ul>\n        <li><strong>Abort:</strong> If a transaction aborts, any changes made to the database are not visible.</li>\n        <li><strong>Commit:</strong> If a transaction is committed, the changes made are visible.</li>\n    </ul>\n    <p>Atomicity is also known as the \"All or nothing rule.\"</p>\n    \n    <img src=\"https://static.takeuforward.org/content/acid-2-ZyCMEPZk\" alt=\"Atomicity Example\" style=\"max-width: 600px;\">\n    \n    <h3>Consistency</h3>\n    <p>Consistency means that integrity constraints must be maintained so that the database remains consistent before and after the transaction. It ensures the correctness of the database.</p>\n    <p>Example: Referring to the previous example, the total amount before and after the transaction must be the same. If initially, Account X has £500 and Account Y has £200, then:</p>\n    <ul>\n        <li>Total before transaction T = £500 + £200 = £700</li>\n        <li>Total after transaction T = £400 + £300 = £700</li>\n    </ul>\n    <p>The database remains consistent. If T1 completes but T2 fails, the transaction T is incomplete, causing inconsistency.</p>\n\n    <h3>Isolation</h3>\n    <p>Isolation ensures that multiple transactions can occur concurrently without causing database inconsistency. Transactions operate independently without interference. Changes made in a particular transaction are not visible to other transactions until those changes are written to memory or committed.</p>\n    <p>Example: Let X = £500, Y = £500. Consider two transactions T and T'. If T executes until Read(Y) and then T' starts, operations may interleave, causing T' to read the correct value of X but an incorrect value of Y. Thus, the computed sum by T' (X + Y = 50000 + 500 = 50500) will be inconsistent with the sum after T completes (X + Y = 50000 + 450 = 50450). This inconsistency highlights the need for isolation, ensuring changes are only visible after being committed.</p>\n\n    <h3>Durability</h3>\n    <p>Durability guarantees that once a transaction has been completed, its updates and modifications are stored on disk and persist even in the case of a system failure. These updates become permanent and are stored in non-volatile memory.</p>\n    <p>Example: Once a transfer of £100 from Account X to Account Y is committed, the changes are permanently recorded. If the system crashes immediately after the transaction, the changes will not be lost and will be reflected when the system is restored.</p>\n\n    <h3>Advantages of ACID Properties in DBMS:</h3>\n    <ul>\n        <li>Data Consistency: Maintains consistent and accurate data after transaction execution.</li>\n        <li>Data Integrity: Ensures that changes to the database are permanent.</li>\n        <li>Concurrency Control: Manages multiple transactions occurring simultaneously, preventing interference.</li>\n        <li>Recovery: Enables the system to recover data up to the point of failure.</li>\n    </ul>\n\n    <h3>Disadvantages of ACID Properties in DBMS:</h3>\n    <ul>\n        <li>Performance: This can cause performance overhead due to additional processing.</li>\n        <li>Scalability: This may pose scalability challenges in large distributed systems.</li>\n        <li>Complexity: Implementation can increase system complexity and require significant resources.</li>\n    </ul>\n<blockquote class=\"wp-block-quote is-style-default\"> <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p> </blockquote>"
      },
      {
        "id": "Schedule(SERIAL,-PARALLEL)",
        "sl_no_in_step": 2,
        "title": "Schedule(SERIAL, PARALLEL)",
        "yt_link": "https://youtu.be/upPtgE9UkB8?si=ln3k2ajiJH0b3WA2",
        "article_link": "https://takeuforward.org/dbms/scheduling",
        "content": " <p>In database management systems (DBMS), scheduling is the process of organizing and executing transactions in a specific sequence to ensure that the operations do not interfere with each other, maintaining the consistency and integrity of the database.</p>\n    \n    <img src=\"https://static.takeuforward.org/content/scheduling-1-kdrfsSNL\" alt=\"Scheduling Overview\" style=\"max-width: 600px;\">\n\n    <h3>Serial Schedules</h3>\n    <p>Serial schedules execute transactions one after another without interleaving. This means no transaction starts until the currently running transaction has finished. This approach ensures no conflicts but does not take advantage of the potential concurrency benefits.</p>\n    <img src=\"https://static.takeuforward.org/content/scehduling-2-s5lna_na\" alt=\"Serial Schedule Example\" style=\"max-width: 600px;\">\n    <p>Here, T1 completes all its operations before T2 starts. This is a serial schedule since T1 and T2 do not overlap.</p>\n\n    <h3>Non-serial schedules</h3>\n    <p>A non-serial schedule interleaves the operations of multiple transactions. This can lead to concurrency issues but aims to keep the result consistent with that of a serial schedule. Unlike serial schedules, where one transaction waits for another to complete, in non-serial schedules, transactions proceed concurrently. Non-serial schedules can be either serialisable or non-serializable.</p>\n\n    <h4>2.1. Serialisable Schedules</h4>\n    <p>Serialisable schedules ensure database consistency by verifying that the interleaved execution is equivalent to serial execution. This is crucial in non-serial scheduling, whereas serial schedules inherently maintain consistency. Serialisable schedules enhance resource utilization and CPU throughput. There are two types:</p>\n\n    <h5>2.1.1. Conflict Serialisable</h5>\n    <p>A schedule is conflict serialisable if it can be transformed into a serial schedule by swapping non-conflicting operations. Operations are conflicting if they:</p>\n    <ul>\n        <li>Belong to different transactions.</li>\n        <li>Operate on the same data item.</li>\n        <li>At least one operation is a write.</li>  \n    </ul>\n\n    <h5>2.1.2. View Serialisable</h5>\n    <p>A schedule is view serialisable if it is view equivalent to a serial schedule, meaning it produces the same outcome as a serial schedule. While all conflict serialisable schedules are view serialisable, the reverse is not always true, especially if blind writes are involved.</p>\n\n    <h4>2.2. Non-serialisable schedule</h4>\n    <p>Non-serialisable schedules can be divided into two types: Recoverable and Non-recoverable Schedules.</p>\n\n    <h5>2.2.1. Recoverable schedule</h5>\n    <p>A recoverable schedule ensures that a transaction commits only after all transactions whose changes it has read also commit. In other words, if transaction Tj reads a value updated by transaction Ti, then Tj must commit only after Ti commits.</p>\n    <img src=\"https://static.takeuforward.org/content/scheduling-3-vAVVKmoQ\" alt=\"Recoverable Schedule Example\" style=\"max-width: 600px;\">\n    <p>This is a recoverable schedule since T1 commits before T2, making the value read by T2 correct.</p>\n\n    <h6>2.2.1.1. Cascading Schedule</h6>\n    <p>Also known as Avoids Cascading Aborts/Rollbacks (ACA). When a failure in one transaction leads to the rollback or abort of other dependent transactions, it is referred to as a cascading rollback or cascading abort.</p>\n\n    <h6>2.2.1.2. Cascadeless Schedule</h6>\n    <p>In cascadeless schedules, transactions read values only after all transactions whose changes they are going to read commit. This avoids a series of transaction rollbacks due to a single transaction abort. To prevent cascading aborts, a transaction is disallowed from reading uncommitted changes from another transaction in the same schedule.</p>\n    <img src=\"https://static.takeuforward.org/content/scheduling-4-XDP7D9R3\" alt=\"Cascadeless Schedule Example\" style=\"max-width: 600px;\">\n    <p>This schedule is cascadeless since T2 reads the updated value of A only after T1 commits.</p>\n\n    <h6>2.2.1.3. Strict Schedule</h6>\n    <p>A schedule is strict if for any two transactions Ti and Tj, if a write operation of Ti precedes a conflicting operation of Tj (either read or write), then the commit or abort event of Ti also precedes that conflicting operation of Tj. In other words, Tj can read or write a value updated by Ti only after Ti commits or aborts.</p>\n    <img src=\"https://static.takeuforward.org/content/scheduling-5-wV0f5urX\" alt=\"Strict Schedule Example\" style=\"max-width: 600px;\">\n\n    <h5>2.2.2. Non-Recoverable schedule</h5>\n    <p>A non-recoverable schedule allows a transaction to commit based on an uncommitted change, which can lead to inconsistency if the initial transaction later aborts.</p>\n    <img src=\"https://static.takeuforward.org/content/scheduling-6-xCE7YovZ\" alt=\"Non-Recoverable Schedule Example\" style=\"max-width: 600px;\">\n    <p>Here, T2 reads the value of A written by T1 and commits. If T1 later aborts, the value read by T2 is incorrect, but since T2 has committed, this schedule is non-recoverable.</p>\n\n    <blockquote>\n        <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n    </blockquote>\n"
      },
      {
        "id": "Isolation-levels-and-its-types",
        "sl_no_in_step": 3,
        "title": "Isolation levels and its types",
        "yt_link": "https://youtu.be/8aOAgyOw420?si=YD-SPFnHEpnON3zT",
        "article_link": "https://takeuforward.org/dbms/isolation-levels-and-its-types",
        "content": "<p>In database management systems (DBMS), isolation levels are important for keeping data consistent while allowing multiple transactions to happen at the same time. Isolation is part of the ACID properties: Atomicity, Consistency, Isolation, and Durability. It ensures that transactions do not interfere with each other.</p>\n\n<h3>Phenomena Related to Isolation</h3>\n<ul>\n    <li><b>Dirty Read</b>: This happens when a transaction reads data that hasn’t been saved yet. For example, if Transaction T1 updates a row but hasn't committed it, and Transaction T2 reads that row, T2 gets uncommitted data. If T1 rolls back its changes, the data T2 read becomes invalid.</li>\n    <li><b>Non-Repeatable Read</b>: This occurs when a transaction reads the same row twice and gets different values. If Transaction T1 reads data, and then Transaction T2 updates that data and commits it, T1 will see different data if it reads the row again.</li>\n    <li><b>Phantom Read</b>: This happens when two identical queries are run but return different results. For example, if Transaction T1 retrieves rows based on a condition, and then Transaction T2 adds new rows that meet this condition, T1 will get different results when it runs the query again.</li>\n</ul>\n\n<h3>SQL Isolation Levels</h3>\n<p>The SQL standard defines four isolation levels that describe how changes made by one transaction are visible to others:</p>\n<ol>\n    <li><b>Read Uncommitted</b>: The lowest level, where transactions can read uncommitted changes from others. This can lead to dirty reads, non-repeatable reads, and phantom reads.</li>\n    <li><b>Read Committed</b>: This level ensures that any data read is committed at the time it is read, preventing dirty reads. However, it can still result in non-repeatable reads and phantom reads.</li>\n    <li><b>Repeatable Read</b>: Guarantees that if a transaction reads a row, it will see the same data throughout its duration, preventing dirty reads and non-repeatable reads, but still allowing phantom reads.</li>\n    <li><b>Serializable</b>: The highest isolation level, where transactions are executed one after another, ensuring no dirty reads, non-repeatable reads, or phantom reads.</li>\n</ol>\n\n<h3>Choosing the Appropriate Isolation Level</h3>\n<p>When deciding on an isolation level, consider the following:</p>\n<ul>\n    <li><b>Higher Isolation Levels</b>: These offer stronger consistency but may slow down the system due to longer lock times.</li>\n    <li><b>Lower Isolation Levels</b>: These improve speed and concurrency but can cause data inconsistencies.</li>\n</ul>\n\n<h3>Additional Isolation Features</h3>\n<p>Some DBMSs have extra isolation features like:</p>\n<ul>\n    <li><b>Snapshot Isolation</b>: Allows transactions to work with a snapshot of the database at a specific time.</li>\n    <li><b>Multi-Version Concurrency Control (MVCC)</b>: Maintains multiple versions of data for better concurrency.</li>\n</ul>\n\n<h3>Advantages of Isolation Levels</h3>\n<ul>\n    <li><b>Improved Concurrency</b>: Multiple transactions can run at the same time without affecting each other.</li>\n    <li><b>Data Consistency Control</b>: Helps manage how consistent the data should be.</li>\n    <li><b>Reduced Data Anomalies</b>: Helps prevent dirty reads, non-repeatable reads, and phantom reads.</li>\n    <li><b>Flexibility</b>: Different levels offer flexibility for various application needs.</li>\n</ul>\n\n<h3>Disadvantages of Isolation Levels</h3>\n<ul>\n    <li><b>Increased Overhead</b>: More checks and locks can slow down the system.</li>\n    <li><b>Decreased Concurrency</b>: Higher levels can reduce the number of transactions that can happen simultaneously.</li>\n    <li><b>Limited Support</b>: Not all DBMS support all isolation levels, which can affect portability.</li>\n    <li><b>Complexity</b>: Different isolation levels add complexity to database applications.</li>\n</ul>\n\n<h3>Examples of Isolation Phenomena</h3>\n<ul>\n    <li><b>Dirty Read</b>: If T1 updates a row and doesn’t commit it, T2 reads that row. If T1 rolls back, T2 has read invalid data.</li>\n    <li><b>Non-Repeatable Read</b>: T1 reads a row. T2 updates and commits it. T1 reads it again and sees a different value.</li>\n    <li><b>Phantom Read</b>: T1 retrieves rows based on a condition. T2 adds rows meeting that condition. T1 runs the query again and gets new results.</li>\n</ul>\n\n<p>For more information, visit <a href=\"https://static.takeuforward.org/content/isolation-levels-1-u3Z7Cz6D\">this link</a>.</p>\n\n<blockquote>\n    <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n</blockquote>"
      },
      {
        "id": "Serializability-and-concurrency-control",
        "sl_no_in_step": 4,
        "title": "Serializability and concurrency control",
        "yt_link": "https://youtu.be/SeCgEy8UTKo?si=SdZbZBVqGmSe9J6-",
        "article_link": "https://takeuforward.org/dbms/serializability-concurrency-control",
        "content": "    <p>In database management, <b>serializability</b> and <b>concurrency control</b> are essential concepts that ensure the consistency and accuracy of databases when multiple transactions occur simultaneously. These techniques help maintain data integrity and avoid issues like data anomalies.</p>\n\n    <h3>What is Serializability?</h3>\n    <p><b>Serializability</b> is a concept that ensures the results of executing multiple transactions concurrently are the same as if they were executed one after the other, in some order. It helps in achieving a consistent database state, even when transactions overlap in time.</p>\n\n    <h3>Types of Serializability</h3>\n    <p>There are different forms of serializability that help in determining whether a schedule (order of transactions) is serializable:</p>\n    <ul>\n        <li><b>Conflict Serializability:</b> A schedule is conflict-serializable if it can be converted into a serial schedule by swapping non-conflicting operations.</li>\n        <li><b>View Serializability:</b> A schedule is view-serializable if it preserves the same view as a serial schedule, meaning that transactions see the same data, even if the order of operations differs.</li>\n    </ul>\n    <p><b>Example:</b> Suppose two transactions, T1 and T2, read and write the same data item. If T1 writes before T2 reads, conflict serializability ensures that T2 will get the value written by T1, as if they executed in that order.</p>\n\n    <h3>Challenges of Serializability</h3>\n    <p>Ensuring serializability is critical but can be challenging due to:</p>\n    <ul>\n        <li><b>Performance Overheads:</b> Serializability can slow down the system as transactions wait for others to finish.</li>\n        <li><b>Complexity:</b> Determining whether a schedule is serializable can be complex, especially for large numbers of transactions.</li>\n    </ul>\n\n    <h3>What is Concurrency Control?</h3>\n    <p><b>Concurrency Control</b> refers to the methods used to manage simultaneous operations on a database without causing conflicts. It ensures that database transactions are executed in a way that maintains consistency and isolation.</p>\n    <img src=\"https://static.takeuforward.org/content/-AedkO_ao\" alt=\"Concurrency Control\">\n\n    <p>The primary goal of concurrency control is to prevent issues such as:</p>\n    <ul>\n        <li><b>Lost Update:</b> Occurs when two transactions update the same data simultaneously, resulting in the loss of one of the updates.</li>\n        <li><b>Dirty Read:</b> When a transaction reads uncommitted data from another transaction, which might later be rolled back.</li>\n        <li><b>Non-Repeatable Read:</b> Occurs when a transaction reads the same data multiple times but gets different values each time due to updates by other transactions.</li>\n    </ul>\n\n    <h3>Techniques for Concurrency Control</h3>\n    <p>There are various techniques to implement concurrency control in databases:</p>\n    <ul>\n        <li>\n            <h3>1. Lock-Based Protocols</h3>\n            <p><b>Lock-Based Protocols</b> use locks to control access to data. A transaction must acquire a lock before it can read or write a data item.</p>\n            <p>Locks can be <b>shared</b> (allowing read-only access) or <b>exclusive</b> (allowing write access). Two-phase locking (2PL) is a common lock-based protocol.</p>\n            <img src=\"https://static.takeuforward.org/content/-TFoSx0Es\" alt=\"Locked Concurrency Control\">\n            <p><b>Example:</b> In an e-commerce database, if one transaction locks a product record for updating, another transaction cannot access it until the lock is released, ensuring consistency.</p>\n        </li>\n        <li>\n            <h3>2. Timestamp-Based Protocols</h3>\n            <p><b>Timestamp-Based Protocols</b> assign a unique timestamp to each transaction and use these timestamps to determine the order of execution. Transactions are executed based on their timestamps, maintaining serializability.</p>\n            <p><b>Example:</b> A banking system uses timestamps to ensure that older transactions are processed before newer ones, preventing conflicts between transactions that update the same account.</p>\n        </li>\n        <li>\n            <h3>3. Optimistic Concurrency Control</h3>\n            <p><b>Optimistic Concurrency Control</b> assumes that transactions do not conflict and checks for conflicts only at the time of commit. If a conflict is detected, the transaction is rolled back.</p>\n            <p><b>Example:</b> A social media application allows users to update their profiles simultaneously. Conflicts are checked when the data is saved, and users are prompted to try again if a conflict occurs.</p>\n        </li>\n        <li>\n            <h3>4. Multiversion Concurrency Control (MVCC)</h3>\n            <p><b>MVCC</b> maintains multiple versions of a data item, allowing transactions to read different versions based on their timestamps. It provides high performance and reduces the need for locks.</p>\n            <p><b>Example:</b> A database for an online streaming platform uses MVCC to allow viewers to read data while updates are being made, ensuring smooth user experience without blocking reads.</p>\n        </li>\n    </ul>\n\n    <h3>Importance of Serializability and Concurrency Control</h3>\n    <p>Maintaining serializability and using effective concurrency control techniques help in:</p>\n    <ul>\n        <li><b>Ensuring Data Integrity:</b> Prevents data corruption by managing concurrent transactions properly.</li>\n        <li><b>Maximizing System Throughput:</b> Allows multiple transactions to execute concurrently, increasing the overall performance of the database.</li>\n        <li><b>Improving User Experience:</b> Reduces waiting times for users accessing the database, especially in high-traffic applications.</li>\n    </ul>\n\n    <h3>Applications of Serializability and Concurrency Control</h3>\n    <ul>\n        <li><b>Banking Systems:</b> Ensures that transactions like deposits and withdrawals are processed accurately, even when multiple users access accounts simultaneously.</li>\n        <li><b>E-commerce Platforms:</b> Prevents issues like double booking or inventory mismatches when multiple customers purchase the same item at the same time.</li>\n        <li><b>Social Media:</b> Maintains consistency when users interact with posts and comments concurrently, ensuring that data is updated correctly.</li>\n        <li><b>Online Reservations:</b> Ensures that booking systems maintain accurate availability data when multiple users attempt to make reservations.</li>\n    </ul>\n\n\n\n<blockquote class=\"wp-block-quote is-style-default\"> <p>Special thanks to <strong>Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p> </blockquote>\n"
      },
      {
        "id": "Locking-protocols(shared-locks,-exclusive-locks)",
        "sl_no_in_step": 5,
        "title": "Locking protocols(shared locks, exclusive locks)",
        "yt_link": "https://youtu.be/msXIZz5UFXo?si=YLlujEv90z008B96",
        "article_link": "https://takeuforward.org/dbms/locking-protocols",
        "content": "<p>When multiple transactions occur at the same time, they might try to access the same data. Locking protocols help control how these transactions access data, ensuring that the database stays consistent and correct.</p>\n\n<p>Locking protocols in a Database Management System (DBMS) manage access to data items to maintain consistency and isolation in a multi-user environment. They control how and when locks are applied to avoid conflicts such as lost updates, dirty reads, and uncommitted data.</p>\n\n<h3>Types of Locks</h3>\n\n<h4>1. Shared Locks (S-Locks)</h4>\n<p>A shared lock allows multiple transactions to read a data item at the same time but prevents any from writing to it. This lock is also called a read-only lock and is requested using the lock-S instruction.</p>\n<ul>\n    <li><b>Purpose:</b> Allows read-only operations to proceed without interference and ensures no modifications occur while data is being read.</li>\n    <li><b>Characteristics:</b> \n        <ul>\n            <li>Multiple transactions can hold shared locks on the same data item simultaneously.</li>\n            <li>Prevents data modifications while shared locks are held.</li>\n        </ul>\n    </li>\n    <li><b>Example:</b> Transaction T1 and T2 both want to read the balance of account A. Both can hold a shared lock on account A at the same time.</li>\n</ul>\n\n<h4>2. Exclusive Locks (X-Locks)</h4>\n<p>An exclusive lock allows a transaction to both read and write a data item. It ensures that no other transaction can read or write the data item until the exclusive lock is released.</p>\n<ul>\n    <li><b>Purpose:</b> Ensures complete control over a data item for modifications and prevents other transactions from accessing the data item.</li>\n    <li><b>Characteristics:</b> \n        <ul>\n            <li>Only one transaction can hold an exclusive lock on a data item at any time.</li>\n            <li>Blocks both read and write access for other transactions.</li>\n        </ul>\n    </li>\n    <li><b>Example:</b> Transaction T1 wants to update the balance of account A. It acquires an exclusive lock on account A, preventing any other transaction from accessing account A until T1 releases the lock.</li>\n</ul>\n\n<h3>Concurrency Control Protocols</h3>\n<p>Concurrency control protocols allow multiple transactions to happen while ensuring they are conflict/view serializable, recoverable, and sometimes cascadeless. These protocols enforce rules to prevent non-serializable schedules.</p>\n\n<h3>Types of Lock-Based Protocols</h3>\n\n<h4>Simplistic Lock Protocol</h4>\n<p>The simplistic lock protocol requires that a transaction must obtain a lock on every data item it accesses before reading or writing. Once the transaction completes all its operations, it releases all the locks.</p>\n<ul>\n    <li><b>Characteristics:</b> \n        <ul>\n            <li>Easy to implement with a simple rule: acquire a lock before accessing a data item.</li>\n            <li>Uses a single type of lock, limiting concurrent access to data items.</li>\n        </ul>\n    </li>\n    <li><b>Advantages:</b> \n        <ul>\n            <li>Simple to understand and implement.</li>\n            <li>Maintains data consistency by preventing concurrent access to the same data item.</li>\n        </ul>\n    </li>\n    <li><b>Disadvantages:</b> \n        <ul>\n            <li>Limits concurrency and can lead to performance bottlenecks.</li>\n            <li>Does not address deadlocks, where transactions wait indefinitely for each other.</li>\n        </ul>\n    </li>\n</ul>\n\n<h4>Pre-Claiming Lock Protocol</h4>\n<p>The pre-claiming lock protocol mandates that a transaction must declare and obtain all the locks it will need before any operations are performed.</p>\n<ul>\n    <li><b>Characteristics:</b> \n        <ul>\n            <li>A transaction must acquire all required locks at the beginning or wait until they are all available.</li>\n            <li>Helps prevent deadlocks by avoiding cyclic dependencies.</li>\n        </ul>\n    </li>\n    <li><b>Advantages:</b> \n        <ul>\n            <li>Prevents deadlocks by acquiring all locks upfront.</li>\n            <li>Straightforward to understand and implement.</li>\n        </ul>\n    </li>\n    <li><b>Disadvantages:</b> \n        <ul>\n            <li>Holding all locks can reduce concurrency, leading to potential performance issues.</li>\n            <li>Locks may be held longer than necessary, leading to inefficient resource use.</li>\n        </ul>\n    </li>\n</ul>\n\n<h4>Two-Phase Locking (2PL)</h4>\n<p>The Two-Phase Locking protocol divides transaction execution into two phases: the growing phase and the shrinking phase.</p>\n<ul>\n    <li><b>Growing Phase:</b> Transactions can acquire locks but cannot release any.</li>\n    <li><b>Shrinking Phase:</b> Transactions can release locks but cannot acquire new ones.</li>\n    <li><b>Characteristics:</b> \n        <ul>\n            <li>Guarantees that transactions are serializable.</li>\n            <li>Can lead to deadlocks, similar to simplistic protocols.</li>\n        </ul>\n    </li>\n    <li><b>Advantages:</b> \n        <ul>\n            <li>Preserves database consistency through serializability.</li>\n            <li>Ensures transactions do not interfere with each other.</li>\n        </ul>\n    </li>\n    <li><b>Disadvantages:</b> \n        <ul>\n            <li>Can lead to deadlocks.</li>\n            <li>Performance overhead due to locking phases.</li>\n        </ul>\n    </li>\n</ul>\n\n<h4>Strict Two-Phase Locking (Strict-2PL)</h4>\n<p>This is a variant of the 2PL protocol where a transaction must hold all its exclusive locks until it commits or aborts.</p>\n<ul>\n    <li><b>Characteristics:</b> \n        <ul>\n            <li>Exclusive locks are retained until the transaction completes.</li>\n            <li>Shared locks can be released before the transaction commits.</li>\n        </ul>\n    </li>\n    <li><b>Advantages:</b> \n        <ul>\n            <li>Prevents cascading aborts, ensuring consistency.</li>\n            <li>Simplifies recovery as uncommitted changes are not visible to other transactions.</li>\n        </ul>\n    </li>\n    <li><b>Disadvantages:</b> \n        <ul>\n            <li>Can lead to deadlocks, similar to basic 2PL.</li>\n            <li>Reduced concurrency due to holding exclusive locks.</li>\n        </ul>\n    </li>\n</ul>\n\n<h3>Conclusion</h3>\n<p>Locking protocols are essential for ensuring consistency and isolation of transactions in a multi-user database. By understanding and properly implementing shared locks, exclusive locks, and various locking protocols like Two-Phase Locking, databases can effectively manage concurrent transactions, prevent conflicts, and maintain data integrity.</p>\n\n<blockquote>\n    <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n</blockquote>\n"
      },
      {
        "id": "Database-recovery-management",
        "sl_no_in_step": 6,
        "title": "Database recovery management",
        "yt_link": "https://youtu.be/1pSxXwy0qiE?si=xJMTWmxf_ydcBRtT",
        "article_link": "https://takeuforward.org/dbms/database-recovery-management",
        "content": "<p>Database Recovery Management is the process of restoring a database to a correct state after a failure. This ensures that databases can recover from unexpected events like hardware malfunctions, software errors, or human mistakes, maintaining data integrity and minimizing downtime.</p>\n\n    <h3>Why is Database Recovery Important?</h3>\n    <p><b>Database recovery</b> is crucial to ensure that <b>data integrity</b> and <b>availability</b> are maintained. When a failure occurs, it can cause data loss or corruption. Effective recovery methods help restore data, minimize business interruptions, and ensure that operations can resume smoothly.</p>\n\n    <h3>Types of Database Failures</h3>\n    <p>Understanding the types of failures that can affect a database is key to designing effective recovery strategies. Some common types of failures include:</p>\n    <ul>\n        <li><b>Transaction Failure:</b> Occurs when a transaction is unable to complete successfully, often due to input errors or logical inconsistencies.</li>\n        <li><b>System Failure:</b> Happens when the operating system or database software crashes, causing all active transactions to halt.</li>\n        <li><b>Media Failure:</b> Refers to physical damage to storage devices, such as a hard drive failure, that makes stored data inaccessible.</li>\n        <li><b>Natural Disasters:</b> Includes events like floods, earthquakes, or fires that can lead to loss of entire database servers.</li>\n    </ul>\n\n    <h3>Techniques for Database Recovery</h3>\n    <p>There are several techniques to recover a database after a failure. These methods help restore data to a consistent state, ensuring minimal data loss and downtime.</p>\n    <ul>\n        <li>\n            <h3>1. Backup and Restore</h3>\n            <p>The <b>Backup and Restore</b> method involves creating periodic backups of the database, which can be used to restore data in case of a failure.</p>\n            <p><b>Example:</b> A company creates daily backups of its customer database. In the event of a system crash, they can use the latest backup to restore the data.</p>\n<img src = \"https://static.takeuforward.org/content/--IUQO5Em\">\n        </li>\n        <li>\n            <h3>2. Log-Based Recovery</h3>\n            <p><b>Log-Based Recovery</b> keeps a record of all database changes in a log file. If a failure occurs, the log file is used to redo completed transactions and undo incomplete ones.</p>\n            <p><b>Example:</b> A bank uses log-based recovery to ensure that transactions are either fully completed or rolled back if a failure happens during processing.</p>\n        </li>\n        <li>\n            <h3>3. Shadow Paging</h3>\n            <p><b>Shadow Paging</b> maintains two copies of a database page: a shadow page and a current page. During updates, changes are made to the current page while the shadow page remains intact, providing a recovery point.</p>\n            <p><b>Example:</b> A manufacturing company uses shadow paging to protect its inventory database. If a failure occurs, the system reverts to the shadow page to restore the previous state.</p>\n        </li>\n        <li>\n            <h3>4. Checkpointing</h3>\n            <p><b>Checkpointing</b> involves creating a snapshot of the database at a particular point in time. During recovery, the system starts from the last checkpoint, reducing the amount of data that needs to be processed.</p>\n            <p><b>Example:</b> An e-commerce platform creates checkpoints every 10 minutes, so in case of a crash, only transactions after the last checkpoint need to be reprocessed.</p>\n<img src=\"https://static.takeuforward.org/content/-uloyenPF\">\n        </li>\n        <li>\n            <h3>5. Rollback and Rollforward</h3>\n            <p><b>Rollback</b> undoes changes made by incomplete transactions, while <b>Rollforward</b> applies changes from completed transactions to restore the database to a consistent state.</p>\n            <p><b>Example:</b> In a banking system, if a money transfer fails midway, rollback reverses the partial transaction. Rollforward can then be used to apply changes from successfully completed transactions.</p>\n        </li>\n    </ul>\n\n    <h3>Best Practices for Database Recovery</h3>\n    <ul>\n        <li><b>Regular Backups:</b> Schedule frequent backups to ensure that data can be restored quickly when needed.</li>\n        <li><b>Store Backups Off-Site:</b> Keep copies of backups in different locations to protect against natural disasters.</li>\n        <li><b>Test Recovery Procedures:</b> Periodically test recovery methods to ensure they are effective and up-to-date.</li>\n        <li><b>Automate Recovery Processes:</b> Use automation to speed up recovery and reduce the chance of human error.</li>\n    </ul>\n\n    <h3>Applications of Database Recovery Management</h3>\n    <ul>\n        <li><b>Financial Services:</b> Banks and investment firms rely on robust recovery methods to ensure that transactions and records are accurate, even after a system failure.</li>\n        <li><b>Healthcare:</b> Hospitals and clinics use recovery management to protect patient data, ensuring that medical records are safe and available during emergencies.</li>\n        <li><b>Retail:</b> Retailers use database recovery techniques to safeguard transaction data and inventory records, helping to resume operations quickly after an outage.</li>\n        <li><b>Government Agencies:</b> Public sector organizations implement recovery management to maintain the availability of critical data, such as census records and tax information.</li>\n    </ul>\n"
      }
    ]
  },
  {
    "step_no": 6,
    "topic": "Query Optimization",
    "data": [
      {
        "id": "Techniques-for-optimizing-SQL-queries",
        "sl_no_in_step": 1,
        "title": "Techniques for optimizing SQL queries",
        "yt_link": "https://youtu.be/p5jGmXbYcQA?si=yVb_2X5o9IX7qxor",
        "article_link": "https://takeuforward.org/dbms/techniques-for-optimising-sql-queries",
        "content": "<p>Optimising SQL queries is essential to improve the performance and efficiency of database systems. It helps reduce response time, avoid significant lags, and allows servers to run efficiently with low power and memory consumption.</p>\n    \n    <h3>1. Indexing</h3>\n    <p>An index is a schema object used by the server to speed up the retrieval of rows using a pointer. Indexes help locate data quickly, speeding up data retrieval operations on a database table. It's important to index columns that are frequently used in <code>WHERE</code>, <code>JOIN</code>, <code>ORDER BY</code>, or <code>GROUP BY</code> clauses.</p>\n    <p><b>Note:</b> While indexes speed up queries, they add overhead since the database must maintain the indexes along with the main table data. Create indexes carefully and periodically check for unused indexes.</p>\n    <img src=\"https://static.takeuforward.org/content/sql-query-optimisation-1-amfbUWje\" alt=\"Indexing Example\">\n\n    <h3>2. Avoiding SELECT *</h3>\n    <p>Retrieve only necessary columns by specifying the required conditions in a <code>SELECT</code> query instead of using <code>SELECT *</code>. Using <code>SELECT *</code> increases workload by retrieving all data, which can slow down performance.</p>\n    <img src=\"https://static.takeuforward.org/content/sql-select-optiminisation-select-dk3Q7d4H\" alt=\"SELECT Example\">\n\n    <h3>3. Using Proper Joins</h3>\n    <p>Use the appropriate type of join to combine data from multiple tables based on a common field. This ensures optimal performance:</p>\n    <ul>\n        <li><b>Inner Join:</b> Retrieves records with matching values in both tables.</li>\n        <li><b>Left Join:</b> Retrieves all records from the left table and matched records from the right.</li>\n        <li><b>Right Join:</b> Retrieves all records from the right table and matched records from the left.</li>\n        <li><b>Full Join:</b> Retrieves all records when there is a match in either table.</li>\n    </ul>\n    <p>Having indexes on join columns can significantly improve lookup speed.</p>\n    <p><b>Example:</b> To retrieve all employees and their respective department details, use an Inner Join.</p>\n    <img src=\"https://static.takeuforward.org/content/sql-query-optimisation-join-xCQph7qi\" alt=\"Join Example\">\n\n    <h3>4. Using EXISTS Instead of IN or COUNT</h3>\n    <p>When searching for specific records, <code>EXISTS</code> is often more effective than <code>IN</code> or <code>COUNT</code>. <code>EXISTS</code> stops searching after finding the first matching entry, whereas <code>IN</code> and <code>COUNT</code> continue searching.</p>\n    \n    <p><b>Example:</b> Finding customers who have placed at least one order.</p>\n    <ul>\n        <li><code>COUNT:</code> Counts all orders for each customer.</li>\n        <li><code>IN:</code> Checks if the customer ID is in the list of customer IDs returned by the subquery.</li>\n        <li><code>EXISTS:</code> Checks if at least one order exists for each customer.</li>\n    </ul>\n\n    <h3>5. Using WHERE Clause Instead of HAVING</h3>\n    <p>Filter data as early as possible to reduce the number of rows processed. Use <code>WHERE</code> instead of <code>HAVING</code> since <code>WHERE</code> filters rows before grouping.</p>\n    \n    <p><b>Example:</b> To find the total sales amount for products where the sales amount is greater than $1000:</p>\n    <ul>\n        <li><code>HAVING:</code> Groups all rows and then filters.</li>\n        <li><code>WHERE:</code> Filters rows before grouping, reducing data processed.</li>\n    </ul>\n\n    <h3>6. Using JOIN Instead of Subqueries</h3>\n    <p>Subqueries can slow down query performance because they may return many rows. Joins are typically more efficient as they use indexing and allow merging tables in a single operation.</p>\n    \n    <p><b>Example:</b> Finding products ordered more than 10 times:</p>\n    <ul>\n        <li><code>Subquery:</code> Counts matching rows for each product.</li>\n        <li><code>JOIN:</code> Combines products with order details efficiently.</li>\n    </ul>\n\n    <h3>7. Using LIMIT or TOP to Sample Query Results</h3>\n    <p>Use <code>LIMIT</code> or <code>TOP</code> to restrict the number of rows returned, which is useful for large datasets and pagination.</p>\n    \n    <p><b>Example:</b></p>\n    <ul>\n        <li><code>LIMIT:</code> <code>SELECT ProductID, ProductName, Price FROM Products ORDER BY ProductID LIMIT 10;</code></li>\n        <li><code>TOP:</code> <code>SELECT TOP 10 ProductID, ProductName, Price FROM Products ORDER BY ProductID;</code></li>\n    </ul>\n\n    <h3>8. Avoiding Wildcards at the Beginning of LIKE Patterns</h3>\n    <p>Using wildcards (like <code>%</code>) at the beginning of a pattern prevents the use of indexes, leading to full table scans.</p>\n    \n    <p><b>Example:</b></p>\n    <ul>\n        <li><code>Inefficient:</code> <code>WHERE CustomerName LIKE '%Ram';</code></li>\n        <li><code>Efficient:</code> <code>WHERE CustomerName LIKE 'Ram%';</code></li>\n    </ul>\n\n    <h3>9. Using Proper Data Types</h3>\n    <p>Use the correct data type for each column to save space and improve performance. This helps avoid implicit type conversions.</p>\n    \n    <p><b>Example:</b></p>\n    <code>CREATE TABLE Employees (EmployeeID INT PRIMARY KEY, Name VARCHAR(100), Salary DECIMAL(10, 2), DateOfJoining DATE);</code>\n\n    <h3>10. Avoiding Functions on Indexed Columns</h3>\n    <p>Applying functions to indexed columns can prevent the database from using indexes effectively, leading to slower performance.</p>\n    \n    <p><b>Example:</b></p>\n    <ul>\n        <li><code>Inefficient:</code> <code>WHERE UPPER(Name) = 'RAJ';</code></li>\n        <li><code>Optimised:</code> <code>WHERE Name = 'Raj';</code></li>\n    </ul>\n\n    <h3>11. Monitor Query Performance</h3>\n    <p>Monitoring the runtime of queries is critical for identifying poor performance. Use query profiling to analyze statistics such as execution duration and the number of rows returned.</p>\n    \n    <p>Database-specific monitoring tools like <code>EXPLAIN</code>, <code>SHOW STATUS</code>, and slow query logs in MySQL can help detect issues.</p>\n\n    <h3>Conclusion</h3>\n    <p>Optimising SQL queries involves a combination of proper indexing, writing efficient queries, and understanding SQL operations. By applying these techniques, you can significantly improve the performance of your database queries, making your applications more responsive and scalable.</p>\n\n    <blockquote>\n        <p>Special thanks to <b><a href=\"https://www.linkedin.com/in/jhanvee-khola\">Jhanvee Khola</a></b> and <b><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></b> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <b><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></b>.</p>\n    </blockquote>"
      },
      {
        "id": "Indexing-and-its-types",
        "sl_no_in_step": 2,
        "title": "Indexing and its types",
        "yt_link": "https://youtu.be/A2hEyCc2QUY?si=S_REEaRBZa5C0pH0",
        "article_link": "https://takeuforward.org/dbms/indexing-and-its-types",
        "content": "<p>Indexing is a <b>data structure technique</b> implemented over database columns that improves the speed of data retrieval operations on a database table by minimizing the number of disk accesses required when a query is processed. It provides a quick way to look up rows in a table based on the values of one or more columns.</p>\n\n    <p>Indexing, however, fastens the retrieval at the cost of additional writes and storage space to maintain the index data structure.</p>\n\n    <h3>Structure of an Index</h3>\n    <img src=\"https://static.takeuforward.org/content/index_structure-81CXfHak\" alt=\"Index Structure\">\n    <p>The search key is the first column in the database and it contains a duplicate or replica of the table's candidate key or primary key. The primary key values are saved in sorted order so that the relevant data is easily accessible.</p>\n\n    <p>The data reference is the database’s second column. It comprises a collection of pointers that point to the disk block where the value of a certain key is stored.</p>\n\n    <h3>Purpose of Indexing</h3>\n    <p>The main purpose of indexing is to improve the speed of data retrieval operations by reducing the number of disk I/O operations. It helps in:</p>\n    <ul>\n        <li><b>Faster Search Operations</b>: Indexes allow quick location of data without scanning the entire table.</li>\n        <li><b>Efficient Query Processing</b>: Enhances the performance of queries involving SELECT, JOIN, and WHERE clauses.</li>\n        <li><b>Improved Sorting</b>: Helps in sorting operations, as indexes maintain the order of the indexed columns.</li>\n    </ul>\n\n    <h3>Types of Indexes</h3>\n    <img src=\"https://static.takeuforward.org/content/types_of_index-2Q7XY-tU\" alt=\"Types of Indexes\">\n\n    <h3>Primary Index</h3>\n    <p>A primary index is created on the primary key of a table. It uniquely identifies each record in the table. The searching operation is very efficient since primary keys are stored in sorted order.</p>\n    <p>There are two types of primary indexes:</p>\n    \n    <h4>Sparse Index</h4>\n    <p>Contains index records for only some of the values. A sparse index points to each block in the data file.</p>\n    <p><b>Example:</b> If a table has 1000 records, a sparse index might have entries for every 100th record, pointing to the block where the record starts.</p>\n    <img src=\"https://static.takeuforward.org/content/sparse_index-N2L90YUF\" alt=\"Sparse Index Example\">\n\n    <h4>Dense Index</h4>\n    <p>Contains an index record for every search key value in the data file, pointing to the actual data record. It needs more space to store the index record itself.</p>\n    <p><b>Example:</b> For a table with 1000 records, a dense index will have 1000 entries, each pointing to the corresponding data record.</p>\n    <img src=\"https://static.takeuforward.org/content/dense_index-UQcQiU0E\" alt=\"Dense Index Example\">\n\n    <h3>Secondary Index</h3>\n    <p>When sparse indexing is used, the mapping expands in parallel with the table's size. Secondary indexing adds a new level of indexing to reduce the size of the mapping.</p>\n    <p>This method begins with selecting the huge range for the columns, resulting in a minimal mapping size at the first level. The ranges are then broken into smaller groups.</p>\n    <img src=\"https://static.takeuforward.org/content/secondary_index1-gb412pPI\" alt=\"Secondary Index Example\">\n\n    <h3>Clustered Index (Clustering Index)</h3>\n    <p>A clustered index can be defined as an ordered data file. To identify the record faster, we will group two or more columns to get the unique value and create an index out of them.</p>\n    <p><b>Example:</b> For a university database, a clustered index can be created to identify groups of records of students in the same semester or branch. Here Branch_ID would be a non-unique key.</p>\n    <img src=\"https://static.takeuforward.org/content/clustered_index-KSqozDJw\" alt=\"Clustered Index Example\">\n\n    <h3>Ordered Index</h3>\n    <p>Ordered indices are indices that have been sorted. To make searching easier and faster, the indices are frequently arranged/sorted.</p>\n    <p><b>Example:</b> In the case of a university database with thousands of student records, if we need to retrieve the record of the student with ID 378, the DBMS would read the record after it reads 378*2 = 756 bytes using an ordered index, which is significantly less than searching through the entire database.</p>\n\n    <h3>Considerations in Indexing</h3>\n    <p>The most important columns for indexing are selected based on how frequently they are used and the sorts of queries they are subjected to. Regular index maintenance, such as defragmentation and reorganization, can decrease fragmentation and ensure efficiency.</p>\n\n    <h3>Advantages of Indexing</h3>\n    <ul>\n        <li><b>Improved Query Performance</b>: Speeds up the retrieval of data by reducing the number of disk I/O operations.</li>\n        <li><b>Efficient Sorting</b>: Helps in sorting data quickly without needing a full table scan.</li>\n        <li><b>Optimized Searching</b>: Enhances the performance of search operations by providing quick access to records.</li>\n        <li><b>Data Integrity</b>: Ensures unique values are added to indexed columns, helping maintain data integrity.</li>\n        <li><b>Consistent Data Performance</b>: Ensures consistent database performance as data grows.</li>\n    </ul>\n\n    <h3>Disadvantages of Indexing</h3>\n    <ul>\n        <li><b>Increased Storage Space</b>: Indexes require additional storage space, which can be substantial for large tables.</li>\n        <li><b>Slower Write Operations</b>: Insertion, deletion, and update operations become slower due to the overhead of maintaining the indexes.</li>\n        <li><b>Complexity</b>: Managing and optimizing indexes can add complexity to database administration.</li>\n        <li><b>Potential for Fragmentation</b>: Frequent updates and deletions can lead to fragmented indexes, degrading performance.</li>\n    </ul>\n\n    <blockquote>\n        <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/jhanvee-khola\">Jhanvee Khola</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you wish to share your knowledge with the takeUforward community, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check this article</a></strong>.</p>\n    </blockquote>"
      },
      {
        "id": "B-and-B+-trees",
        "sl_no_in_step": 3,
        "title": "B and B+ trees",
        "yt_link": "https://youtu.be/spTiUaTSh-4?si=tMZRnr6qkgs8paNf",
        "article_link": "https://takeuforward.org/dbms/b-bplus-trees",
        "content": "<p>In Database Management Systems (DBMS), efficient data storage and retrieval are very important. B and B+ Trees are key data structures that help keep data sorted and allow for quick insertion, deletion, and searching operations.</p>\n\n    <h3>B Trees</h3>\n\n    <p><b>B Trees</b> are balanced tree data structures that help in storing sorted data and allow operations like searching, adding, removing, and accessing data quickly.</p>\n\n    <h3>Properties:</h3>\n    <ul>\n        <li>Each node can have a maximum of <b>m</b> children and <b>(m-1)</b> keys, where <b>m</b> is the order of the tree.</li>\n        <li>Non-root and non-leaf nodes can have at least <b>ceil(m/2)</b> children.</li>\n        <li>All leaves are at the same level.</li>\n        <li>Keys within nodes are sorted, guiding searches.</li>\n    </ul>\n\n    <h3>Insertion:</h3>\n    <p>Nodes are added only at leaf nodes, allowing B Trees to grow and shrink from the root.</p>\n\n    <h3>Example:</h3>\n    <p>For instance, in a library database, a B Tree can efficiently find a book by its ISBN, add new books, or remove old ones.</p>\n\n    <img src=\"https://static.takeuforward.org/content/B_Tree-VvwCLWYx\" alt=\"B Tree\">\n\n    <h3>B+ Trees</h3>\n\n    <p><b>B+ Trees</b> are an extension of B Trees, where all keys are stored at the leaf level, and internal nodes only store keys to guide searches.</p>\n\n    <h3>Properties:</h3>\n    <ul>\n        <li>Internal nodes act as guides, while actual data is in the leaf nodes.</li>\n        <li>Leaf nodes are linked for efficient range queries and ordered traversals.</li>\n        <li>Like B Trees, B+ Trees maintain balance with minimum and maximum keys per node.</li>\n    </ul>\n\n    <h3>Example:</h3>\n    <p>An e-commerce platform can use a B+ Tree to manage product listings, allowing for quick lookups and handling range queries efficiently.</p>\n\n    <img src=\"https://static.takeuforward.org/content/B+_Tree-w9NhEtpR\" alt=\"B+ Tree\">\n\n    <h3>B and B+ Trees vs. Conventional Data Structures</h3>\n    <ul>\n        <li><b>Efficient Disk Access:</b> B Trees work well with slow storage like hard drives, unlike arrays and linked lists.</li>\n        <li><b>Self Balancing:</b> B Trees and B+ Trees keep paths from root to leaves of similar length for efficient searching.</li>\n        <li><b>Handling Large Volumes of Data:</b> They can manage big datasets that don’t fit in memory.</li>\n        <li><b>Dynamic Size Handling:</b> They adjust size easily without major reorganizations, unlike arrays.</li>\n        <li><b>Support for Range Queries:</b> B and B+ Trees allow efficient range queries while also enabling fast insertions and deletions.</li>\n    </ul>\n\n    <h3>Applications of B and B+ Trees</h3>\n    <ul>\n        <li><b>File Systems:</b> Used in systems like NTFS and ext4 for quick file operations.</li>\n        <li><b>Databases:</b> Databases like MySQL and PostgreSQL use B+ Trees for fast query performance.</li>\n        <li><b>Search Engines:</b> B+ Trees index web pages by keywords for quick retrieval.</li>\n        <li><b>Telecommunication Networks:</b> They manage subscriber information and call records effectively.</li>\n        <li><b>Geospatial Databases:</b> Systems like GIS use B+ Trees to index spatial data for efficient geographical queries.</li>\n    </ul>\n\n    <p>B Trees and B+ Trees are vital in DBMS, ensuring efficient data management. Their balanced nature supports fast performance for adding, removing, and finding data, making them ideal for applications with large data needs.</p>\n\n    <blockquote>\n        <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/jhanvee-khola\">Jhanvee Khola</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n    </blockquote>\n"
      }
    ]
  },
  {
    "step_no": 7,
    "topic": "Scalability and performance optimization",
    "data": [
      {
        "id": "Vertical-and-Horizontal-scaling",
        "sl_no_in_step": 1,
        "title": "Vertical and Horizontal scaling",
        "yt_link": "https://youtu.be/NjfvoTiWwoo?si=L5JUY_efuMwOKKpa",
        "article_link": "https://takeuforward.org/dbms/vertical-horizontal-scaling",
        "content": "    <p>Scaling changes the size of a system. In this process, we can either make the system smaller or larger to meet expected needs. Scaling can be achieved by adding resources to an existing system, adding a new system, or doing both.</p>\n\n    <h3>Types of Scaling</h3>\n    \n    <h4>Vertical Scaling</h4>\n    <p><b>Vertical scaling</b> means adding new resources to the existing system to meet expectations.</p>\n    \n    <p>Example: Imagine a server rack that holds the current system. If it fails to meet the needs, and we can fix it by just adding more resources like CPU or RAM, that is vertical scaling. This type of scaling is usually easier and cheaper compared to horizontal scaling and takes less time to implement.</p>\n\n    <h4>Horizontal Scaling</h4>\n    <p><b>Horizontal scaling</b> involves adding new server racks to the existing system to meet higher expectations.</p>\n\n    <p>Example: Using the same server rack scenario, if the system cannot be improved by just adding resources, we need to add new servers. This is horizontal scaling. It involves more machines and is typically more complex and costly than vertical scaling. It also takes more time to implement.</p>\n\n    <img src=\"https://static.takeuforward.org/content/scaling-1-MEYDttzw\" alt=\"Scaling Illustration\">\n\n    <h3>Differences Between Horizontal and Vertical Scaling</h3>\n    <table>\n        <tr>\n            <th>Horizontal Scaling</th>\n            <th>Vertical Scaling</th>\n        </tr>\n        <tr>\n            <td>New server racks are added to meet higher expectations.</td>\n            <td>New resources are added to meet expectations.</td>\n        </tr>\n        <tr>\n            <td>Expands the system size horizontally.</td>\n            <td>Expands the system size vertically.</td>\n        </tr>\n        <tr>\n            <td>Easier to upgrade.</td>\n            <td>Harder to upgrade and may require downtime.</td>\n        </tr>\n        <tr>\n            <td>Difficult to implement.</td>\n            <td>Easy to implement.</td>\n        </tr>\n        <tr>\n            <td>Costly, as new server racks comprise many resources.</td>\n            <td>Cheaper, as only new resources need to be added.</td>\n        </tr>\n        <tr>\n            <td>Takes more time to implement.</td>\n            <td>Takes less time to implement.</td>\n        </tr>\n        <tr>\n            <td>High resilience and fault tolerance.</td>\n            <td>Single point of failure.</td>\n        </tr>\n        <tr>\n            <td>Examples: Cassandra, MongoDB, Google Cloud Spanner.</td>\n            <td>Examples: MySQL, Amazon RDS.</td>\n        </tr>\n    </table>\n\n    <h3>Advantages and Disadvantages</h3>\n    \n    <h4>Advantages of Vertical Scaling</h4>\n    <ul>\n        <li><b>Cost-Effective:</b> Cheaper than horizontal scaling.</li>\n        <li><b>Simplicity:</b> Easier to implement and manage.</li>\n        <li><b>Speed:</b> Faster to scale up by adding resources.</li>\n    </ul>\n\n    <h4>Disadvantages of Vertical Scaling</h4>\n    <ul>\n        <li><b>Limited Capacity:</b> Limited by the maximum capacity of a single machine.</li>\n        <li><b>Downtime:</b> May require downtime to upgrade.</li>\n        <li><b>Single Point of Failure:</b> If the system fails, all services may go down.</li>\n    </ul>\n\n    <h4>Advantages of Horizontal Scaling</h4>\n    <ul>\n        <li><b>High Availability:</b> More resilient with no single point of failure.</li>\n        <li><b>Flexibility:</b> Can scale out indefinitely by adding more machines.</li>\n        <li><b>No Downtime:</b> New servers can be added without downtime.</li>\n    </ul>\n\n    <h4>Disadvantages of Horizontal Scaling</h4>\n    <ul>\n        <li><b>Complexity:</b> More complex to implement and manage.</li>\n        <li><b>Cost:</b> More expensive due to additional hardware and management overhead.</li>\n        <li><b>Time-Consuming:</b> Takes longer to add and configure new servers.</li>\n    </ul>\n\n    <h3>Summary</h3>\n    <p>In summary, vertical scaling is great for simpler, cost-effective solutions with quick implementation, but it has limits in capacity and fault tolerance. On the other hand, horizontal scaling offers more flexibility, resilience, and capacity but is more complex and expensive.</p>\n\n    <blockquote>\n        <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n    </blockquote>"
      },
      {
        "id": "Sharding",
        "sl_no_in_step": 2,
        "title": "Sharding",
        "yt_link": "https://youtu.be/NjfvoTiWwoo?si=L5JUY_efuMwOKKpa",
        "article_link": "https://takeuforward.org/dbms/sharding",
        "content": "    <p>Sharding in SQL refers to the practice of dividing a large database into smaller, more manageable pieces called \"shards.\" Each shard is a separate database instance that can be hosted on different servers or clusters. Sharding is commonly used to improve the <b>performance</b>, <b>scalability</b>, and <b>availability</b> of a database system.</p>\n\n    <img src=\"https://static.takeuforward.org/content/shard-1-tZs_LdrN\" alt=\"Sharding Illustration\">\n\n    <h3>Sharded Database</h3>\n    <p>Sharding involves distributing data rows across multiple nodes. For example:</p>\n    \n    <img src=\"https://static.takeuforward.org/content/shard-2-om7dL3Xx\" alt=\"Sharded Database Example\">\n\n    <h3>Components of Sharding</h3>\n    <ul>\n        <li><b>Shards:</b> Logical partitions of data stored on separate machines. Each physical shard can contain multiple logical shards.</li>\n        <li><b>Shard Key:</b> A column in the dataset used to determine how rows are distributed across shards. It can be an existing column or a newly created one.</li>\n        <li><b>Shared-Nothing Architecture:</b> Each shard operates independently and is unaware of others. Only the shards with relevant data process requests in parallel.</li>\n    </ul>\n\n    <h3>Methods of Database Sharding</h3>\n    \n    <h4>1. Range-Based Sharding</h4>\n    <p><b>Description:</b> Data is partitioned based on a range of values of the shard key.</p>\n    <p><b>Example:</b> Sharding customer names by the first letter:</p>\n    <ul>\n        <li>Names starting with A-I → Shard A</li>\n        <li>Names starting with J-S → Shard B</li>\n        <li>Names starting with T-Z → Shard C</li>\n    </ul>\n    <p><b>Pros:</b> Easier to implement.</p>\n    <p><b>Cons:</b> Can lead to uneven data distribution and hotspots.</p>\n\n    <h4>2. Hashed Sharding</h4>\n    <p><b>Description:</b> Uses a hash function on the shard key to determine the shard.</p>\n    <p><b>Example:</b> Using hash values to distribute customer records:</p>\n    \n    <img src=\"https://static.takeuforward.org/content/shard-3-YsxxGMSw\" alt=\"Hashed Sharding Example\">\n\n    <p><b>Pros:</b> Even data distribution among shards.</p>\n    <p><b>Cons:</b> Difficult to reassign hash values when adding more shards.</p>\n\n    <h4>3. Directory Sharding</h4>\n    <p><b>Description:</b> Uses a lookup table to map shard keys to shards.</p>\n    <p><b>Example:</b> Clothing colors mapped to shards:</p>\n\n    <img src=\"https://static.takeuforward.org/content/shard-4-jJnEdfZA\" alt=\"Directory Sharding Example\">\n\n    <p><b>Pros:</b> Flexible and meaningful data distribution.</p>\n    <p><b>Cons:</b> Fails if the lookup table is incorrect.</p>\n\n    <h4>4. Geo Sharding</h4>\n    <p><b>Description:</b> Partitions data based on geographical location.</p>\n    <p><b>Example:</b> Using cities as shard keys for a dating service:</p>\n\n    <img src=\"https://static.takeuforward.org/content/shard-5-1zv4Zf8e\" alt=\"Geo Sharding Example\">\n\n    <p><b>Pros:</b> Faster data retrieval due to proximity.</p>\n    <p><b>Cons:</b> Can result in uneven data distribution.</p>\n\n    <h3>Optimizing Database Sharding</h3>\n    <p><b>Key Factors:</b></p>\n    <ul>\n        <li><b>Cardinality:</b> The number of unique values in the shard key. Higher cardinality allows for more shards.</li>\n        <li><b>Frequency:</b> The probability of data being stored in specific shards. Avoid high-frequency shard keys to prevent hotspots.</li>\n        <li><b>Monotonic Change:</b> The rate at which the shard key values change. Avoid monotonically increasing or decreasing shard keys to ensure balanced shards.</li>\n    </ul>\n\n    <h4>Example of Poor Sharding</h4>\n    <p>A feedback database is split by the number of customer purchases:</p>\n    <ul>\n        <li>Shard A: 0-10 purchases</li>\n        <li>Shard B: 11-20 purchases</li>\n        <li>Shard C: 21+ purchases</li>\n    </ul>\n    <p>As customers make more purchases, Shard C becomes overloaded, leading to imbalance.</p>\n\n    <h3>Conclusion</h3>\n    <p>Database sharding is a powerful technique for managing large datasets by distributing data across multiple nodes. Proper shard key selection and understanding different sharding methods can help optimize performance and maintain balanced data distribution.</p>\n\n<blockquote class=\"wp-block-quote is-style-default\"> <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/kuhuk-agarwal-342603202/\">Kuhuk Agarwal</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p> </blockquote>"
      }
    ]
  },
  {
    "step_no": 8,
    "topic": "Data Integrity and Security",
    "data": [
      {
        "id": "RBAC(Role-based-access-control )",
        "sl_no_in_step": 1,
        "title": "RBAC(Role-based access control )",
        "yt_link": "https://youtu.be/1-QvahOQAgo?si=k0Lg-ZcmSNlBlS69",
        "article_link": "https://takeuforward.org/dbms/role-based-access-control",
        "content": "<p>Role-Based Access Control (RBAC) is a pivotal mechanism in Database Management Systems (DBMS) for managing and enforcing security policies. By assigning roles to users and granting permissions based on these roles, RBAC simplifies the administration of access rights and enhances security.</p>\n\n    <h3>Principles of RBAC</h3>\n    <p>RBAC is built on the idea of assigning permissions to roles rather than individuals. Here’s how it works:</p>\n    <ul>\n        <li><b>Roles:</b> Defined based on job functions within an organization (e.g., admin, manager, employee).</li>\n        <li><b>Permissions:</b> Specific access rights assigned to roles (e.g., read, write, delete).</li>\n        <li><b>Users:</b> Individuals assigned to one or more roles based on their responsibilities.</li>\n    </ul>\n    <p>By separating the assignment of permissions from individual users, RBAC provides a more manageable and scalable approach to access control.</p>\n\n    <img src=\"https://static.takeuforward.org/content/rbac_diag-rL8QXvhl\" alt=\"RBAC Diagram\">\n\n    <h3>Core Components</h3>\n    <ul>\n        <li><b>User Assignment:</b> Users are assigned to roles based on their job responsibilities.</li>\n        <li><b>Role Permissions:</b> Roles are granted specific permissions that define what actions can be performed.</li>\n        <li><b>Role Hierarchies:</b> Roles can be organized in a hierarchy, allowing for inheritance of permissions (e.g., a senior manager role might inherit permissions from a manager role).</li>\n    </ul>\n\n    <h3>Advantages of RBAC</h3>\n    <ul>\n        <li><b>Simplified Administration:</b> Admins can manage access rights more efficiently by modifying roles rather than individual user permissions.</li>\n        <li><b>Enhanced Security:</b> By enforcing the principle of least privilege, users only have the permissions necessary for their role, reducing the risk of unauthorized access.</li>\n        <li><b>Scalability:</b> As organizations grow, adding new users and modifying roles becomes more straightforward without compromising security.</li>\n        <li><b>Compliance:</b> Helps in meeting regulatory requirements by ensuring that access controls are systematically enforced.</li>\n    </ul>\n\n    <h3>Disadvantages of RBAC</h3>\n    <ul>\n        <li><b>Complexity:</b> Implementing RBAC makes the system more complex. Setting up roles and permissions for each user can take time, and access levels may require regular maintenance to ensure they stay appropriate.</li>\n        <li><b>Inflexible:</b> Roles and permissions designated on a set of pre-designed rules are difficult to edit to accommodate exception cases where access is required to resources by users not within their access definitions.</li>\n        <li><b>Delegation:</b> Delegation of roles and respective accesses is difficult, especially in large organizations. This can cause delays in gaining access to resources, affecting productivity and corporate operations.</li>\n        <li><b>Granularity:</b> RBAC limits the ability to make granular access decisions based on specific user attributes, resulting in users not having specific accesses they require or having access to more resources than they need, which can lead to data breaches.</li>\n    </ul>\n\n    <h3>Real-World Application of RBAC</h3>\n    <p>Let’s imagine a scenario at a university to better understand how RBAC can be implemented:</p>\n    <ul>\n        <li><b>Roles:</b> Student, Faculty, Registrar, IT Support.</li>\n        <li><b>Permissions:</b></li>\n        <ul>\n            <li>Students can register for courses and view their own academic records. They cannot access other students' or faculty records.</li>\n            <li>Faculty can access and update the academic records of students enrolled in their courses. They cannot access personal information of students or other faculty members.</li>\n            <li>Registrars have comprehensive access to all student and faculty records for administrative purposes.</li>\n            <li>IT Support manages the system infrastructure without accessing academic or personal data.</li>\n        </ul>\n    </ul>\n\n    <h3>Conclusion</h3>\n    <p>Role-Based Access Control (RBAC) is a robust and scalable method for managing access to databases in various sectors. By assigning permissions to roles rather than individuals, RBAC simplifies administrative tasks, enhances security, and ensures compliance with regulatory standards. Whether in healthcare, finance, e-commerce, or education, RBAC ensures that sensitive data is protected while allowing users to perform their duties efficiently. As data security remains a top priority, the adoption of RBAC in DBMS continues to be a critical component of organizational IT strategies.</p>\n\n    <blockquote>\n        <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/jhanvee-khola\">Jhanvee Khola</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p>\n    </blockquote>"
      },
      {
        "id": "Encryption ",
        "sl_no_in_step": 2,
        "title": "Encryption ",
        "yt_link": null,
        "article_link": null
      },
      {
        "id": "Data-masking-techniques",
        "sl_no_in_step": 3,
        "title": "Data masking techniques",
        "yt_link": "https://youtu.be/r3BZLgjKoyQ",
        "article_link": "https://takeuforward.org/dbms/data-masking-techniques",
        "content": "    <p>In the age of big data, businesses and organizations are constantly collecting, storing, and analyzing large amounts of data. While this data is valuable for decision-making, it also comes with privacy and security risks. One effective strategy to reduce these risks is <b>data masking</b>.</p>\n\n    <h3>What is Data Masking?</h3>\n    <p><b>Data masking</b>, also known as <b>data obfuscation</b>, hides original data by replacing it with modified content. This ensures that sensitive information is not accessible to unauthorized users. Masked data keeps the same format as the original, making it suitable for testing and development without risking privacy.</p>\n\n    <h3>Techniques of Data Masking</h3>\n    <ul>\n        <li>\n            <h3>1. Static Data Masking (SDM)</h3>\n            <p>Static Data Masking modifies data at rest within the database. It is useful for creating copies of databases for testing, development, or training purposes.</p>\n            <p><b>Example:</b> A healthcare organization masks patient names, Social Security numbers, and medical records when creating a copy of its database for testing.</p>\n            <img src=\"https://static.takeuforward.org/content/-zJQ5XXH4\" alt=\"Static Data Masking\">\n        </li>\n        <li>\n            <h3>2. Dynamic Data Masking (DDM)</h3>\n            <p>Dynamic Data Masking hides data as it is accessed by unauthorized users, without changing the original data. It is ideal for real-time data access control.</p>\n            <p><b>Example:</b> In an online banking system, customer account numbers are masked for service representatives, showing only the last four digits.</p>\n        </li>\n        <li>\n            <h3>3. Deterministic Data Masking</h3>\n            <p>Deterministic Data Masking ensures that a specific data value is replaced with the same masked value every time, providing consistency across databases.</p>\n            <p><b>Example:</b> A retail company masks customer emails so \"john.doe@example.com\" is always replaced with \"masked.email1@example.com\".</p>\n        </li>\n        <li>\n            <h3>4. Non-Deterministic Data Masking</h3>\n            <p>Non-Deterministic Data Masking replaces data with different values each time, adding more protection through variability.</p>\n            <p><b>Example:</b> Employee phone numbers in an HR database are masked differently each time, making it harder to trace back to the original number.</p>\n        </li>\n        <li>\n            <h3>5. Format-Preserving Masking</h3>\n            <p>This technique maintains the original format and structure of data even after masking, making it ideal for applications that require specific data formats.</p>\n            <p><b>Example:</b> A credit card company masks card numbers but retains their 16-digit structure.</p>\n        </li>\n        <li>\n            <h3>6. Shuffling</h3>\n            <p>Shuffling reorders existing data within a column, keeping data realistic while breaking its relationship with original records.</p>\n            <p><b>Example:</b> A university masks student grades by shuffling them, keeping them realistic but not linked to specific students.</p>\n        </li>\n        <li>\n            <h3>7. Redaction</h3>\n            <p>Redaction completely removes sensitive information, often used for data that should never be exposed.</p>\n            <p><b>Example:</b> Legal documents have client details redacted before being shared externally.</p>\n        </li>\n        <li>\n            <h3>8. Nulling Out</h3>\n            <p>Nulling Out replaces sensitive data with NULL values, used when the data is not needed for the current task.</p>\n            <p><b>Example:</b> In market research, names and addresses are nulled out before sharing data with third-party analysts.</p>\n            <img src=\"https://static.takeuforward.org/content/-BoYhhjoQ\" alt=\"Nulling Out\">\n        </li>\n    </ul>\n\n    <h3>Applications of Data Masking</h3>\n    <ul>\n        <li><b>Healthcare Industry:</b> Hospitals use data masking for patient privacy when developing new systems. This ensures compliance with regulations like HIPAA.</li>\n        <li><b>Financial Sector:</b> Banks mask customer data during app development to keep account numbers and transaction details secure.</li>\n        <li><b>E-commerce:</b> Online stores mask payment data in analytics to prevent unauthorized access and maintain customer trust.</li>\n        <li><b>Education:</b> Universities protect student records during research by masking personal data, ensuring compliance with FERPA.</li>\n    </ul>\n\n    <h3>Conclusion</h3>\n    <p><b>Data masking</b> is a crucial part of protecting sensitive information in databases. By using different masking techniques, organizations can make data usable in non-production environments while keeping it safe from unauthorized access. As data privacy becomes more critical, adopting effective data masking practices helps maintain trust and protect against data breaches.</p>\n\n<blockquote class=\"wp-block-quote is-style-default\"> <p>Special thanks to <strong><a href=\"https://www.linkedin.com/in/jhanvee-khola\">Jhanvee Khola</a></strong> and <strong><a href=\"https://www.linkedin.com/in/gauri-tomar-005048268/\">Gauri Tomar</a></strong> for contributing to this article on takeUforward. If you also wish to share your knowledge with the takeUforward fam, <strong><a href=\"https://takeuforward.org/interviews/paid-work-from-home-internship-at-takeuforward/\">please check out this article</a></strong>.</p> </blockquote>"
      }
    ]
  }
]